"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/webgazer";
exports.ids = ["vendor-chunks/webgazer"];
exports.modules = {

/***/ "(ssr)/./node_modules/webgazer/src/dom_util.mjs":
/*!************************************************!*\
  !*** ./node_modules/webgazer/src/dom_util.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// helper functions\n\n/**\n * Provides requestAnimationFrame in a cross browser way.\n */\nwindow.requestAnimFrame = (function() {\n  return window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\n      return window.setTimeout(callback, 1000/60);\n    };\n})();\n\n/**\n * Provides cancelRequestAnimationFrame in a cross browser way.\n */\nwindow.cancelRequestAnimFrame = (function() {\n  return window.cancelCancelRequestAnimationFrame ||\n    window.webkitCancelRequestAnimationFrame ||\n    window.mozCancelRequestAnimationFrame ||\n    window.oCancelRequestAnimationFrame ||\n    window.msCancelRequestAnimationFrame ||\n    window.clearTimeout;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViZ2F6ZXIvc3JjL2RvbV91dGlsLm1qcyIsIm1hcHBpbmdzIjoiO0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1lY29tbWVyY2Utd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy93ZWJnYXplci9zcmMvZG9tX3V0aWwubWpzP2E0NDAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaGVscGVyIGZ1bmN0aW9uc1xuXG4vKipcbiAqIFByb3ZpZGVzIHJlcXVlc3RBbmltYXRpb25GcmFtZSBpbiBhIGNyb3NzIGJyb3dzZXIgd2F5LlxuICovXG53aW5kb3cucmVxdWVzdEFuaW1GcmFtZSA9IChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgIHdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgZnVuY3Rpb24oLyogZnVuY3Rpb24gRnJhbWVSZXF1ZXN0Q2FsbGJhY2sgKi8gY2FsbGJhY2ssIC8qIERPTUVsZW1lbnQgRWxlbWVudCAqLyBlbGVtZW50KSB7XG4gICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAvNjApO1xuICAgIH07XG59KSgpO1xuXG4vKipcbiAqIFByb3ZpZGVzIGNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSBpbiBhIGNyb3NzIGJyb3dzZXIgd2F5LlxuICovXG53aW5kb3cuY2FuY2VsUmVxdWVzdEFuaW1GcmFtZSA9IChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHdpbmRvdy5jYW5jZWxDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICB3aW5kb3cud2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgd2luZG93Lm1vekNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgIHdpbmRvdy5vQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgd2luZG93Lm1zQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgd2luZG93LmNsZWFyVGltZW91dDtcbn0pKCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/webgazer/src/dom_util.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/webgazer/src/facemesh.mjs":
/*!************************************************!*\
  !*** ./node_modules/webgazer/src/facemesh.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _tensorflow_models_face_landmarks_detection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow-models/face-landmarks-detection */ \"(ssr)/./node_modules/@tensorflow-models/face-landmarks-detection/dist/index.js\");\n\n\n/**\n * Constructor of TFFaceMesh object\n * @constructor\n * */\nconst TFFaceMesh = function() {\n  //Backend options are webgl, wasm, and CPU.\n  //For recent laptops WASM is better than WebGL.\n  this.model = _tensorflow_models_face_landmarks_detection__WEBPACK_IMPORTED_MODULE_0__.load(\n    _tensorflow_models_face_landmarks_detection__WEBPACK_IMPORTED_MODULE_0__.SupportedPackages.mediapipeFacemesh,\n    { maxFaces: 1 }\n  );\n  this.predictionReady = false;\n};\n\n// Global variable for face landmark positions array\nTFFaceMesh.prototype.positionsArray = null;\n\n/**\n * Isolates the two patches that correspond to the user's eyes\n * @param  {Object} video - the video element itself\n * @param  {Canvas} imageCanvas - canvas corresponding to the webcam stream\n * @param  {Number} width - of imageCanvas\n * @param  {Number} height - of imageCanvas\n * @return {Object} the two eye-patches, first left, then right eye\n */\nTFFaceMesh.prototype.getEyePatches = async function(video, imageCanvas, width, height) {\n\n  if (imageCanvas.width === 0) {\n    return null;\n  }\n\n  // Load the MediaPipe facemesh model.\n  const model = await this.model;\n\n  // Pass in a video stream (or an image, canvas, or 3D tensor) to obtain an\n  // array of detected faces from the MediaPipe graph.\n  const predictions = await model.estimateFaces({\n    input: video,\n    returnTensors: false,\n    flipHorizontal: false,\n    predictIrises: false,\n  });\n\n  if (predictions.length == 0){\n    return false;\n  }\n\n  // Save positions to global variable\n  this.positionsArray = predictions[0].scaledMesh;\n  const prediction = predictions[0]\n  const positions = this.positionsArray;\n\n  const { scaledMesh } = predictions[0];\n  // Keypoints indexes are documented at\n  // https://github.com/tensorflow/tfjs-models/blob/118d4727197d4a21e2d4691e134a7bc30d90deee/face-landmarks-detection/mesh_map.jpg\n  // https://stackoverflow.com/questions/66649492/how-to-get-specific-landmark-of-face-like-lips-or-eyes-using-tensorflow-js-face\n  const [leftBBox, rightBBox] = [\n    // left\n    {\n      eyeTopArc: prediction.annotations.leftEyeUpper0,\n      eyeBottomArc: prediction.annotations.leftEyeLower0\n    },\n    // right\n    {\n      eyeTopArc: prediction.annotations.rightEyeUpper0,\n      eyeBottomArc: prediction.annotations.rightEyeLower0\n    },\n  ].map(({ eyeTopArc, eyeBottomArc }) => {\n    const topLeftOrigin = {\n      x: Math.round(Math.min(...eyeTopArc.map(v => v[0]))),\n      y: Math.round(Math.min(...eyeTopArc.map(v => v[1]))),\n    };\n    const bottomRightOrigin = {\n      x: Math.round(Math.max(...eyeBottomArc.map(v => v[0]))),\n      y: Math.round(Math.max(...eyeBottomArc.map(v => v[1]))),\n    };\n\n    return {\n      origin: topLeftOrigin,\n      width: bottomRightOrigin.x - topLeftOrigin.x,\n      height: bottomRightOrigin.y - topLeftOrigin.y,\n    }\n  });\n  var leftOriginX = leftBBox.origin.x;\n  var leftOriginY = leftBBox.origin.y;\n  var leftWidth = leftBBox.width;\n  var leftHeight = leftBBox.height;\n  var rightOriginX = rightBBox.origin.x;\n  var rightOriginY = rightBBox.origin.y;\n  var rightWidth = rightBBox.width;\n  var rightHeight = rightBBox.height;\n\n  if (leftWidth === 0 || rightWidth === 0){\n    console.log('an eye patch had zero width');\n    return null;\n  }\n\n  if (leftHeight === 0 || rightHeight === 0){\n    console.log('an eye patch had zero height');\n    return null;\n  }\n\n  // Start building object to be returned\n  var eyeObjs = {};\n\n  var leftImageData = imageCanvas.getContext('2d').getImageData(leftOriginX, leftOriginY, leftWidth, leftHeight);\n  eyeObjs.left = {\n    patch: leftImageData,\n    imagex: leftOriginX,\n    imagey: leftOriginY,\n    width: leftWidth,\n    height: leftHeight\n  };\n\n  var rightImageData = imageCanvas.getContext('2d').getImageData(rightOriginX, rightOriginY, rightWidth, rightHeight);\n  eyeObjs.right = {\n    patch: rightImageData,\n    imagex: rightOriginX,\n    imagey: rightOriginY,\n    width: rightWidth,\n    height: rightHeight\n  };\n\n  this.predictionReady = true;\n\n  return eyeObjs;\n};\n\n/**\n * Returns the positions array corresponding to the last call to getEyePatches.\n * Requires that getEyePatches() was called previously, else returns null.\n */\nTFFaceMesh.prototype.getPositions = function () {\n  return this.positionsArray;\n}\n\n/**\n * Reset the tracker to default values\n */\nTFFaceMesh.prototype.reset = function(){\n  console.log( \"Unimplemented; Tracking.js has no obvious reset function\" );\n}\n\n/**\n * Draw TF_FaceMesh_Overlay\n */\nTFFaceMesh.prototype.drawFaceOverlay = function(ctx, keypoints){\n  // If keypoints is falsy, don't do anything\n  if (keypoints) {\n    ctx.fillStyle = '#32EEDB';\n    ctx.strokeStyle = '#32EEDB';\n    ctx.lineWidth = 0.5;\n\n    for (let i = 0; i < keypoints.length; i++) {\n      const x = keypoints[i][0];\n      const y = keypoints[i][1];\n\n      ctx.beginPath();\n      ctx.arc(x, y, 1 /* radius */, 0, 2 * Math.PI);\n      ctx.closePath();\n      ctx.fill();\n    }\n  }\n}\n\n/**\n * The TFFaceMesh object name\n * @type {string}\n */\nTFFaceMesh.prototype.name = 'TFFaceMesh';\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TFFaceMesh);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/webgazer/src/facemesh.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/webgazer/src/index.mjs":
/*!*********************************************!*\
  !*** ./node_modules/webgazer/src/index.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs */ \"(ssr)/./node_modules/@tensorflow/tfjs/dist/tf.node.js\");\n/* harmony import */ var regression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! regression */ \"(ssr)/./node_modules/regression/dist/regression.js\");\n/* harmony import */ var _params_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./params.mjs */ \"(ssr)/./node_modules/webgazer/src/params.mjs\");\n/* harmony import */ var _dom_util_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom_util.mjs */ \"(ssr)/./node_modules/webgazer/src/dom_util.mjs\");\n/* harmony import */ var localforage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! localforage */ \"(ssr)/./node_modules/localforage/dist/localforage.js\");\n/* harmony import */ var _facemesh_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./facemesh.mjs */ \"(ssr)/./node_modules/webgazer/src/facemesh.mjs\");\n/* harmony import */ var _ridgeReg_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ridgeReg.mjs */ \"(ssr)/./node_modules/webgazer/src/ridgeReg.mjs\");\n/* harmony import */ var _ridgeWeightedReg_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ridgeWeightedReg.mjs */ \"(ssr)/./node_modules/webgazer/src/ridgeWeightedReg.mjs\");\n/* harmony import */ var _ridgeRegThreaded_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ridgeRegThreaded.mjs */ \"(ssr)/./node_modules/webgazer/src/ridgeRegThreaded.mjs\");\n/* harmony import */ var _util_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util.mjs */ \"(ssr)/./node_modules/webgazer/src/util.mjs\");\n\n//import(/* webpackPreload: true */ '@tensorflow/tfjs');\n//import(/* webpackChunkName: 'pageA' */ './vendors~main.js')\n\n\n\n\n\n\n\n\n\n\n\nconst webgazer = {};\nwebgazer.tracker = {};\nwebgazer.tracker.TFFaceMesh = _facemesh_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"];\nwebgazer.reg = _ridgeReg_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\nwebgazer.reg.RidgeWeightedReg = _ridgeWeightedReg_mjs__WEBPACK_IMPORTED_MODULE_7__[\"default\"].RidgeWeightedReg;\nwebgazer.reg.RidgeRegThreaded = _ridgeRegThreaded_mjs__WEBPACK_IMPORTED_MODULE_8__[\"default\"].RidgeRegThreaded;\nwebgazer.util = _util_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"];\nwebgazer.params = _params_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n\n//PRIVATE VARIABLES\n\n//video elements\nvar videoStream = null;\nvar videoContainerElement = null;\nvar videoElement = null;\nvar videoElementCanvas = null;\nvar faceOverlay = null;\nvar faceFeedbackBox = null;\nvar gazeDot = null;\n// Why is this not in webgazer.params ?\nvar debugVideoLoc = '';\n\n/*\n * Initialises variables used to store accuracy eigenValues\n * This is used by the calibration example file\n */\nvar xPast50 = new Array(50);\nvar yPast50 = new Array(50);\n\n// loop parameters\nvar clockStart = performance.now();\nvar latestEyeFeatures = null;\nvar latestGazeData = null;\nvar paused = false;\n//registered callback for loop\nvar nopCallback = function(data, time) {};\nvar callback = nopCallback;\n\n//Types that regression systems should handle\n//Describes the source of data so that regression systems may ignore or handle differently the various generating events\nvar eventTypes = ['click', 'move'];\n\n//movelistener timeout clock parameters\nvar moveClock = performance.now();\n//currently used tracker and regression models, defaults to clmtrackr and linear regression\nvar curTracker = new webgazer.tracker.TFFaceMesh();\nvar regs = [new webgazer.reg.RidgeReg()];\n// var blinkDetector = new webgazer.BlinkDetector();\n\n//lookup tables\nvar curTrackerMap = {\n  'TFFacemesh': function() { return new webgazer.tracker.TFFaceMesh(); },\n};\nvar regressionMap = {\n  'ridge': function() { return new webgazer.reg.RidgeReg(); },\n  'weightedRidge': function() { return new webgazer.reg.RidgeWeightedReg(); },\n  'threadedRidge': function() { return new webgazer.reg.RidgeRegThreaded(); },\n};\n\n//localstorage name\nvar localstorageDataLabel = 'webgazerGlobalData';\nvar localstorageSettingsLabel = 'webgazerGlobalSettings';\n//settings object for future storage of settings\nvar settings = {};\nvar data = [];\nvar defaults = {\n  'data': [],\n  'settings': {}\n};\n\n\n//PRIVATE FUNCTIONS\n\n/**\n * Computes the size of the face overlay validation box depending on the size of the video preview window.\n * @returns {Object} The dimensions of the validation box as top, left, width, height.\n */\nwebgazer.computeValidationBoxSize = function() {\n\n  var vw = videoElement.videoWidth;\n  var vh = videoElement.videoHeight;\n  var pw = parseInt(videoElement.style.width);\n  var ph = parseInt(videoElement.style.height);\n\n  // Find the size of the box.\n  // Pick the smaller of the two video preview sizes\n  var smaller = Math.min( vw, vh );\n  var larger  = Math.max( vw, vh );\n\n  // Overall scalar\n  var scalar = ( vw == larger ? pw / vw : ph / vh );\n\n  // Multiply this by 2/3, then adjust it to the size of the preview\n  var boxSize = (smaller * webgazer.params.faceFeedbackBoxRatio) * scalar;\n\n  // Set the boundaries of the face overlay validation box based on the preview\n  var topVal = (ph - boxSize)/2;\n  var leftVal = (pw - boxSize)/2;\n\n  // top, left, width, height\n  return [topVal, leftVal, boxSize, boxSize]\n}\n\n/**\n * Checks if the pupils are in the position box on the video\n */\nfunction checkEyesInValidationBox() {\n\n  if (faceFeedbackBox != null && latestEyeFeatures) {\n    var w = videoElement.videoWidth;\n    var h = videoElement.videoHeight;\n\n    // Find the size of the box.\n    // Pick the smaller of the two video preview sizes\n    var smaller = Math.min( w, h );\n    var boxSize = smaller * webgazer.params.faceFeedbackBoxRatio;\n\n    // Set the boundaries of the face overlay validation box based on the preview\n    var topBound = (h - boxSize)/2;\n    var leftBound = (w - boxSize)/2;\n    var rightBound = leftBound + boxSize;\n    var bottomBound = topBound + boxSize;\n\n    //get the x and y positions of the left and right eyes\n    var eyeLX = latestEyeFeatures.left.imagex;\n    var eyeLY = latestEyeFeatures.left.imagey;\n    var eyeRX = latestEyeFeatures.right.imagex;\n    var eyeRY = latestEyeFeatures.right.imagey;\n\n\n    var xPositions = false;\n    var yPositions = false;\n\n    // check if the x values for the left and right eye are within the\n    // validation box\n    // add the width when comparing against the rightBound (which is the left edge on the preview)\n    if (eyeLX > leftBound && eyeLX + latestEyeFeatures.left.width < rightBound) {\n      if (eyeRX > leftBound && eyeRX + latestEyeFeatures.right.width < rightBound) {\n        xPositions = true;\n      }\n    }\n\n    //check if the y values for the left and right eye are within the\n    //validation box\n    if (eyeLY > topBound && eyeLY + latestEyeFeatures.left.height < bottomBound) {\n      if (eyeRY > topBound && eyeRY + latestEyeFeatures.right.height < bottomBound) {\n        yPositions = true;\n      }\n    }\n\n    //if the x and y values for both the left and right eye are within\n    //the validation box then the box border turns green, otherwise if\n    //the eyes are outside of the box the colour is red\n    if (xPositions && yPositions){\n      faceFeedbackBox.style.border = 'solid green';\n    } else {\n      faceFeedbackBox.style.border = 'solid red';\n    }\n  }\n  else\n    faceFeedbackBox.style.border = 'solid black';\n}\n\n/**\n * This draws the point (x,y) onto the canvas in the HTML\n * @param {colour} colour - The colour of the circle to plot\n * @param {x} x - The x co-ordinate of the desired point to plot\n * @param {y} y - The y co-ordinate of the desired point to plot\n */\nfunction drawCoordinates(colour,x,y){\n  var ctx = document.getElementById(\"plotting_canvas\").getContext('2d');\n  ctx.fillStyle = colour; // Red color\n  ctx.beginPath();\n  ctx.arc(x, y, 5, 0, Math.PI * 2, true);\n  ctx.fill();\n}\n\n/**\n * Gets the pupil features by following the pipeline which threads an eyes object through each call:\n * curTracker gets eye patches -> blink detector -> pupil detection\n * @param {Canvas} canvas - a canvas which will have the video drawn onto it\n * @param {Number} width - the width of canvas\n * @param {Number} height - the height of canvas\n */\nfunction getPupilFeatures(canvas, width, height) {\n  if (!canvas) {\n    return;\n  }\n  try {\n    return curTracker.getEyePatches(videoElement, canvas, width, height);\n  } catch(err) {\n    console.log(\"can't get pupil features \", err);\n    return null;\n  }\n}\n\n/**\n * Gets the most current frame of video and paints it to a resized version of the canvas with width and height\n * @param {Canvas} canvas - the canvas to paint the video on to\n * @param {Number} width - the new width of the canvas\n * @param {Number} height - the new height of the canvas\n */\nfunction paintCurrentFrame(canvas, width, height) {\n  if (canvas.width != width) {\n    canvas.width = width;\n  }\n  if (canvas.height != height) {\n    canvas.height = height;\n  }\n\n  var ctx = canvas.getContext('2d');\n  ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n}\n\n/**\n * Paints the video to a canvas and runs the prediction pipeline to get a prediction\n * @param {Number|undefined} regModelIndex - The prediction index we're looking for\n * @returns {*}\n */\nasync function getPrediction(regModelIndex) {\n  var predictions = [];\n  // [20200617 xk] TODO: this call should be made async somehow. will take some work.\n  latestEyeFeatures = await getPupilFeatures(videoElementCanvas, videoElementCanvas.width, videoElementCanvas.height);\n\n  if (regs.length === 0) {\n    console.log('regression not set, call setRegression()');\n    return null;\n  }\n  for (var reg in regs) {\n    predictions.push(regs[reg].predict(latestEyeFeatures));\n  }\n  if (regModelIndex !== undefined) {\n    return predictions[regModelIndex] === null ? null : {\n      'x' : predictions[regModelIndex].x,\n      'y' : predictions[regModelIndex].y,\n      'eyeFeatures': latestEyeFeatures\n    };\n  } else {\n    return predictions.length === 0 || predictions[0] === null ? null : {\n      'x' : predictions[0].x,\n      'y' : predictions[0].y,\n      'eyeFeatures': latestEyeFeatures,\n      'all' : predictions\n    };\n  }\n}\n\n/**\n * Runs every available animation frame if webgazer is not paused\n */\nvar smoothingVals = new _util_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"].DataWindow(4);\nvar k = 0;\n\nasync function loop() {\n  if (!paused) {\n\n    // [20200617 XK] TODO: there is currently lag between the camera input and the face overlay. This behavior\n    // is not seen in the facemesh demo. probably need to optimize async implementation. I think the issue lies\n    // in the implementation of getPrediction().\n\n    // Paint the latest video frame into the canvas which will be analyzed by WebGazer\n    // [20180729 JT] Why do we need to do this? clmTracker does this itself _already_, which is just duplicating the work.\n    // Is it because other trackers need a canvas instead of an img/video element?\n    paintCurrentFrame(videoElementCanvas, videoElementCanvas.width, videoElementCanvas.height);\n\n    // Get gaze prediction (ask clm to track; pass the data to the regressor; get back a prediction)\n    latestGazeData = getPrediction();\n    // Count time\n    var elapsedTime = performance.now() - clockStart;\n\n    // Draw face overlay\n    if( webgazer.params.showFaceOverlay )\n    {\n      // Get tracker object\n      var tracker = webgazer.getTracker();\n      faceOverlay.getContext('2d').clearRect( 0, 0, videoElement.videoWidth, videoElement.videoHeight);\n      tracker.drawFaceOverlay(faceOverlay.getContext('2d'), tracker.getPositions());\n    }\n\n    // Feedback box\n    // Check that the eyes are inside of the validation box\n    if( webgazer.params.showFaceFeedbackBox )\n      checkEyesInValidationBox();\n\n    latestGazeData = await latestGazeData;\n\n    // [20200623 xk] callback to function passed into setGazeListener(fn)\n    callback(latestGazeData, elapsedTime);\n\n    if( latestGazeData ) {\n      // [20200608 XK] Smoothing across the most recent 4 predictions, do we need this with Kalman filter?\n      smoothingVals.push(latestGazeData);\n      var x = 0;\n      var y = 0;\n      var len = smoothingVals.length;\n      for (var d in smoothingVals.data) {\n        x += smoothingVals.get(d).x;\n        y += smoothingVals.get(d).y;\n      }\n\n      var pred = _util_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"].bound({'x':x/len, 'y':y/len});\n\n      if (webgazer.params.storingPoints) {\n        drawCoordinates('blue',pred.x,pred.y); //draws the previous predictions\n        //store the position of the past fifty occuring tracker preditions\n        webgazer.storePoints(pred.x, pred.y, k);\n        k++;\n        if (k == 50) {\n          k = 0;\n        }\n      }\n      // GazeDot\n      if (webgazer.params.showGazeDot) {\n        gazeDot.style.display = 'block';\n      }\n      gazeDot.style.transform = 'translate3d(' + pred.x + 'px,' + pred.y + 'px,0)';\n    } else {\n      gazeDot.style.display = 'none';\n    }\n\n    requestAnimationFrame(loop);\n  }\n}\n\n//is problematic to test\n//because latestEyeFeatures is not set in many cases\n\n/**\n * Records screen position data based on current pupil feature and passes it\n * to the regression model.\n * @param {Number} x - The x screen position\n * @param {Number} y - The y screen position\n * @param {String} eventType - The event type to store\n * @returns {null}\n */\nvar recordScreenPosition = function(x, y, eventType) {\n  if (paused) {\n    return;\n  }\n  if (regs.length === 0) {\n    console.log('regression not set, call setRegression()');\n    return null;\n  }\n  for (var reg in regs) {\n    if( latestEyeFeatures )\n      regs[reg].addData(latestEyeFeatures, [x, y], eventType);\n  }\n};\n\n/**\n * Records click data and passes it to the regression model\n * @param {Event} event - The listened event\n */\nvar clickListener = async function(event) {\n  recordScreenPosition(event.clientX, event.clientY, eventTypes[0]); // eventType[0] === 'click'\n\n  if (webgazer.params.saveDataAcrossSessions) {\n    // Each click stores the next data point into localforage.\n    await setGlobalData();\n\n    // // Debug line\n    // console.log('Model size: ' + JSON.stringify(await localforage.getItem(localstorageDataLabel)).length / 1000000 + 'MB');\n  }\n};\n\n/**\n * Records mouse movement data and passes it to the regression model\n * @param {Event} event - The listened event\n */\nvar moveListener = function(event) {\n  if (paused) {\n    return;\n  }\n\n  var now = performance.now();\n  if (now < moveClock + webgazer.params.moveTickSize) {\n    return;\n  } else {\n    moveClock = now;\n  }\n  recordScreenPosition(event.clientX, event.clientY, eventTypes[1]); //eventType[1] === 'move'\n};\n\n/**\n * Add event listeners for mouse click and move.\n */\nvar addMouseEventListeners = function() {\n  //third argument set to true so that we get event on 'capture' instead of 'bubbling'\n  //this prevents a client using event.stopPropagation() preventing our access to the click\n  document.addEventListener('click', clickListener, true);\n  document.addEventListener('mousemove', moveListener, true);\n};\n\n/**\n * Remove event listeners for mouse click and move.\n */\nvar removeMouseEventListeners = function() {\n  // must set third argument to same value used in addMouseEventListeners\n  // for this to work.\n  document.removeEventListener('click', clickListener, true);\n  document.removeEventListener('mousemove', moveListener, true);\n};\n\n/**\n * Loads the global data and passes it to the regression model\n */\nasync function loadGlobalData() {\n  // Get settings object from localforage\n  // [20200611 xk] still unsure what this does, maybe would be good for Kalman filter settings etc?\n  settings = await localforage__WEBPACK_IMPORTED_MODULE_4__.getItem(localstorageSettingsLabel);\n  settings = settings || defaults;\n\n  // Get click data from localforage\n  var loadData = await localforage__WEBPACK_IMPORTED_MODULE_4__.getItem(localstorageDataLabel);\n  loadData = loadData || defaults;\n\n  // Set global var data to newly loaded data\n  data = loadData;\n\n  // Load data into regression model(s)\n  for (var reg in regs) {\n    regs[reg].setData(loadData);\n  }\n\n  console.log(\"loaded stored data into regression model\");\n}\n\n/**\n * Adds data to localforage\n */\nasync function setGlobalData() {\n  // Grab data from regression model\n  var storeData = regs[0].getData() || data; // Array\n\n  // Store data into localforage\n  localforage__WEBPACK_IMPORTED_MODULE_4__.setItem(localstorageSettingsLabel, settings) // [20200605 XK] is 'settings' ever being used?\n  localforage__WEBPACK_IMPORTED_MODULE_4__.setItem(localstorageDataLabel, storeData);\n  //TODO data should probably be stored in webgazer object instead of each regression model\n  //     -> requires duplication of data, but is likely easier on regression model implementors\n}\n\n/**\n * Clears data from model and global storage\n */\nfunction clearData() {\n  // Removes data from localforage\n  localforage__WEBPACK_IMPORTED_MODULE_4__.clear();\n\n  // Removes data from regression model\n  for (var reg in regs) {\n    regs[reg].init();\n  }\n}\n\n/**\n * Initializes all needed dom elements and begins the loop\n * @param {URL} stream - The video stream to use\n */\nasync function init(stream) {\n  //////////////////////////\n  // Video and video preview\n  //////////////////////////\n  var topDist = '0px'\n  var leftDist = '0px'\n\n  // used for webgazer.stopVideo() and webgazer.setCameraConstraints()\n  videoStream = stream;\n\n  // create a video element container to enable customizable placement on the page\n  videoContainerElement = document.createElement('div');\n  videoContainerElement.id = webgazer.params.videoContainerId;\n\n  videoContainerElement.style.position = 'fixed';\n  videoContainerElement.style.top = topDist;\n  videoContainerElement.style.left = leftDist;\n  videoContainerElement.style.width = webgazer.params.videoViewerWidth + 'px';\n  videoContainerElement.style.height = webgazer.params.videoViewerHeight + 'px';\n  hideVideoElement(videoContainerElement);\n\n  videoElement = document.createElement('video');\n  videoElement.setAttribute('playsinline', '');\n  videoElement.id = webgazer.params.videoElementId;\n  videoElement.srcObject = stream;\n  videoElement.autoplay = true;\n  videoElement.style.position = 'absolute';\n  // We set these to stop the video appearing too large when it is added for the very first time\n  videoElement.style.width = webgazer.params.videoViewerWidth + 'px';\n  videoElement.style.height = webgazer.params.videoViewerHeight + 'px';\n  hideVideoElement(videoElement);\n  // videoElement.style.zIndex=\"-1\";\n\n  // Canvas for drawing video to pass to clm tracker\n  videoElementCanvas = document.createElement('canvas');\n  videoElementCanvas.id = webgazer.params.videoElementCanvasId;\n  videoElementCanvas.style.display = 'none';\n\n  // Face overlay\n  // Shows the CLM tracking result\n  faceOverlay = document.createElement('canvas');\n  faceOverlay.id = webgazer.params.faceOverlayId;\n  faceOverlay.style.display = webgazer.params.showFaceOverlay ? 'block' : 'none';\n  faceOverlay.style.position = 'absolute';\n\n  // Mirror video feed\n  if (webgazer.params.mirrorVideo) {\n    videoElement.style.setProperty(\"-moz-transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"-webkit-transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"-o-transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"filter\", \"FlipH\");\n    faceOverlay.style.setProperty(\"-moz-transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"-webkit-transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"-o-transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"filter\", \"FlipH\");\n  }\n\n  // Feedback box\n  // Lets the user know when their face is in the middle\n  faceFeedbackBox = document.createElement('canvas');\n  faceFeedbackBox.id = webgazer.params.faceFeedbackBoxId;\n  faceFeedbackBox.style.display = webgazer.params.showFaceFeedbackBox ? 'block' : 'none';\n  faceFeedbackBox.style.border = 'solid';\n  faceFeedbackBox.style.position = 'absolute';\n\n  // Gaze dot\n  // Starts offscreen\n  gazeDot = document.createElement('div');\n  gazeDot.id = webgazer.params.gazeDotId;\n  gazeDot.style.display = webgazer.params.showGazeDot ? 'block' : 'none';\n  gazeDot.style.position = 'fixed';\n  gazeDot.style.zIndex = 99999;\n  gazeDot.style.left = '-5px';\n  gazeDot.style.top  = '-5px';\n  gazeDot.style.background = 'red';\n  gazeDot.style.borderRadius = '100%';\n  gazeDot.style.opacity = '0.7';\n  gazeDot.style.width = '10px';\n  gazeDot.style.height = '10px';\n\n  // Add other preview/feedback elements to the screen once the video has shown and its parameters are initialized\n  videoContainerElement.appendChild(videoElement);\n  document.body.appendChild(videoContainerElement);\n  const videoPreviewSetup = new Promise((res) => {\n    function setupPreviewVideo(e) {\n\n      // All video preview parts have now been added, so set the size both internally and in the preview window.\n      setInternalVideoBufferSizes( videoElement.videoWidth, videoElement.videoHeight );\n      webgazer.setVideoViewerSize( webgazer.params.videoViewerWidth, webgazer.params.videoViewerHeight );\n\n      videoContainerElement.appendChild(videoElementCanvas);\n      videoContainerElement.appendChild(faceOverlay);\n      videoContainerElement.appendChild(faceFeedbackBox);\n      document.body.appendChild(gazeDot);\n\n      // Run this only once, so remove the event listener\n      e.target.removeEventListener(e.type, setupPreviewVideo);\n      res();\n    };\n    videoElement.addEventListener('loadeddata', setupPreviewVideo);\n  });\n\n  addMouseEventListeners();\n\n  //BEGIN CALLBACK LOOP\n  paused = false;\n  clockStart = performance.now();\n\n  await videoPreviewSetup;\n  await loop();\n}\n\n/**\n * Initializes navigator.mediaDevices.getUserMedia\n * depending on the browser capabilities\n *\n * @return Promise\n */\nfunction setUserMediaVariable(){\n\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {};\n  }\n\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function(constraints) {\n\n      // gets the alternative old getUserMedia is possible\n      var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n      // set an error message if browser doesn't support getUserMedia\n      if (!getUserMedia) {\n        return Promise.reject(new Error(\"Unfortunately, your browser does not support access to the webcam through the getUserMedia API. Try to use the latest version of Google Chrome, Mozilla Firefox, Opera, or Microsoft Edge instead.\"));\n      }\n\n      // uses navigator.getUserMedia for older browsers\n      return new Promise(function(resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject);\n      });\n    }\n  }\n}\n\n//PUBLIC FUNCTIONS - CONTROL\n\n/**\n * Starts all state related to webgazer -> dataLoop, video collection, click listener\n * If starting fails, call `onFail` param function.\n * @param {Function} onFail - Callback to call in case it is impossible to find user camera\n * @returns {*}\n */\nwebgazer.begin = function(onFail) {\n  if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost' && window.chrome){\n    alert(\"WebGazer works only over https. If you are doing local development, you need to run a local server.\");\n  }\n\n  // Load model data stored in localforage.\n  if (webgazer.params.saveDataAcrossSessions) {\n    loadGlobalData();\n  }\n\n  onFail = onFail || function() {console.log('No stream')};\n\n  if (debugVideoLoc) {\n    init(debugVideoLoc);\n    return webgazer;\n  }\n\n  ///////////////////////\n  // SETUP VIDEO ELEMENTS\n  // Sets .mediaDevices.getUserMedia depending on browser\n  setUserMediaVariable();\n\n  // Request webcam access under specific constraints\n  // WAIT for access\n  return new Promise(async (resolve, reject) => {\n    let stream;\n    try {\n      stream = await navigator.mediaDevices.getUserMedia( webgazer.params.camConstraints );\n      await init(stream);\n      resolve(webgazer);\n    } catch(err) {\n      onFail();\n      videoElement = null;\n      stream = null;\n      reject(err);\n    }\n  });\n};\n\n\n/**\n * Checks if webgazer has finished initializing after calling begin()\n * [20180729 JT] This seems like a bad idea for how this function should be implemented.\n * @returns {boolean} if webgazer is ready\n */\nwebgazer.isReady = function() {\n  if (videoElementCanvas === null) {\n    return false;\n  }\n  return videoElementCanvas.width > 0;\n};\n\n/**\n * Stops collection of data and predictions\n * @returns {webgazer} this\n */\nwebgazer.pause = function() {\n  paused = true;\n  return webgazer;\n};\n\n/**\n * Resumes collection of data and predictions if paused\n * @returns {webgazer} this\n */\nwebgazer.resume = async function() {\n  if (!paused) {\n    return webgazer;\n  }\n  paused = false;\n  await loop();\n  return webgazer;\n};\n\n/**\n * stops collection of data and removes dom modifications, must call begin() to reset up\n * @return {webgazer} this\n */\nwebgazer.end = function() {\n  //loop may run an extra time and fail due to removed elements\n  paused = true;\n\n  //webgazer.stopVideo(); // uncomment if you want to stop the video from streaming\n\n  //remove video element and canvas\n  videoContainerElement.remove();\n  gazeDot.remove();\n\n  return webgazer;\n};\n\n/**\n * Stops the video camera from streaming and removes the video outlines\n * @return {webgazer} this\n */\nwebgazer.stopVideo = function() {\n  // Stops the video from streaming\n  videoStream.getTracks()[0].stop();\n\n  // Removes the outline of the face\n  videoContainerElement.removeChild( faceOverlay );\n\n  // Removes the box around the face\n  videoContainerElement.removeChild( faceFeedbackBox );\n\n  return webgazer;\n}\n\n\n//PUBLIC FUNCTIONS - DEBUG\n\n/**\n * Returns if the browser is compatible with webgazer\n * @return {boolean} if browser is compatible\n */\nwebgazer.detectCompatibility = function() {\n\n  var getUserMedia = navigator.mediaDevices.getUserMedia ||\n    navigator.getUserMedia ||\n    navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia;\n\n  return getUserMedia !== undefined;\n};\n\n/**\n * Set whether to show any of the video previews (camera, face overlay, feedback box).\n * If true: visibility depends on corresponding params (default all true).\n * If false: camera, face overlay, feedback box are all hidden\n * @param {bool} val\n * @return {webgazer} this\n */\nwebgazer.showVideoPreview = function(val) {\n  webgazer.params.showVideoPreview = val;\n  webgazer.showVideo(val && webgazer.params.showVideo);\n  webgazer.showFaceOverlay(val && webgazer.params.showFaceOverlay);\n  webgazer.showFaceFeedbackBox(val && webgazer.params.showFaceFeedbackBox);\n  return webgazer;\n}\n\n/**\n * hides a video element (videoElement or videoContainerElement)\n * uses display = 'none' for all browsers except Safari, which uses opacity = '1'\n * because Safari optimizes out video element if display = 'none'\n * @param {Object} element\n * @return {null}\n */\nfunction hideVideoElement(val) {\n  if (navigator.vendor && navigator.vendor.indexOf('Apple') > -1) {\n    val.style.opacity = webgazer.params.showVideo ? '1': '0';\n    val.style.display = 'block';\n  } else {\n    val.style.display = webgazer.params.showVideo ? 'block' : 'none';\n  }\n}\n\n/**\n * Set whether the camera video preview is visible or not (default true).\n * @param {*} bool\n * @return {webgazer} this\n */\nwebgazer.showVideo = function(val) {\n  webgazer.params.showVideo = val;\n  if (videoElement) {\n    hideVideoElement(videoElement);\n  }\n  if (videoContainerElement) {\n    hideVideoElement(videoContainerElement);\n  }\n  return webgazer;\n};\n\n/**\n * Set whether the face overlay is visible or not (default true).\n * @param {*} bool\n * @return {webgazer} this\n */\nwebgazer.showFaceOverlay = function(val) {\n  webgazer.params.showFaceOverlay = val;\n  if( faceOverlay ) {\n    faceOverlay.style.display = val ? 'block' : 'none';\n  }\n  return webgazer;\n};\n\n/**\n * Set whether the face feedback box is visible or not (default true).\n * @param {*} bool\n * @return {webgazer} this\n */\nwebgazer.showFaceFeedbackBox = function(val) {\n\n  webgazer.params.showFaceFeedbackBox = val;\n  if( faceFeedbackBox ) {\n    faceFeedbackBox.style.display = val ? 'block' : 'none';\n  }\n  return webgazer;\n};\n\n/**\n * Set whether the gaze prediction point(s) are visible or not.\n * Multiple because of a trail of past dots. Default true\n * @return {webgazer} this\n */\nwebgazer.showPredictionPoints = function(val) {\n  webgazer.params.showGazeDot = val;\n  if( gazeDot ) {\n    gazeDot.style.display = val ? 'block' : 'none';\n  }\n  return webgazer;\n};\n\n/**\n * Set whether previous calibration data (from localforage) should be loaded.\n * Default true.\n *\n * NOTE: Should be called before webgazer.begin() -- see www/js/main.js for example\n *\n * @param val\n * @returns {webgazer} this\n */\nwebgazer.saveDataAcrossSessions = function(val) {\n  webgazer.params.saveDataAcrossSessions = val;\n  return webgazer;\n}\n\n/**\n * Set whether a Kalman filter will be applied to gaze predictions (default true);\n * @return {webgazer} this\n */\nwebgazer.applyKalmanFilter = function(val) {\n  webgazer.params.applyKalmanFilter = val;\n  return webgazer;\n}\n\n/**\n * Define constraints on the video camera that is used. Useful for non-standard setups.\n * This can be set before calling webgazer.begin(), but also mid stream.\n *\n * @param {Object} constraints Example constraints object:\n * { width: { min: 320, ideal: 1280, max: 1920 }, height: { min: 240, ideal: 720, max: 1080 }, facingMode: \"user\" };\n *\n * Follows definition here:\n * https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API/Constraints\n *\n * Note: The constraints set here are applied to the video track only. They also _replace_ any constraints, so be sure to set everything you need.\n * Warning: Setting a large video resolution will decrease performance, and may require\n */\nwebgazer.setCameraConstraints = async function(constraints) {\n  var videoTrack,videoSettings;\n  webgazer.params.camConstraints = constraints;\n\n  // If the camera stream is already up...\n  if(videoStream)\n  {\n    webgazer.pause();\n    videoTrack = videoStream.getVideoTracks()[0];\n    try {\n      await videoTrack.applyConstraints( webgazer.params.camConstraints );\n      videoSettings = videoTrack.getSettings();\n      setInternalVideoBufferSizes( videoSettings.width, videoSettings.height );\n    } catch(err) {\n      console.log( err );\n      return;\n    }\n    // Reset and recompute sizes of the video viewer.\n    // This is only to adjust the feedback box, say, if the aspect ratio of the video has changed.\n    webgazer.setVideoViewerSize( webgazer.params.videoViewerWidth, webgazer.params.videoViewerHeight )\n    webgazer.getTracker().reset();\n    await webgazer.resume();\n  }\n}\n\n\n/**\n * Does what it says on the tin.\n * @param {*} width\n * @param {*} height\n */\nfunction setInternalVideoBufferSizes( width, height ) {\n  // Re-set the canvas size used by the internal processes\n  if( videoElementCanvas )\n  {\n    videoElementCanvas.width = width;\n    videoElementCanvas.height = height;\n  }\n\n  // Re-set the face overlay canvas size\n  if( faceOverlay )\n  {\n    faceOverlay.width = width;\n    faceOverlay.height = height;\n  }\n}\n\n/**\n *  Set a static video file to be used instead of webcam video\n *  @param {String} videoLoc - video file location\n *  @return {webgazer} this\n */\nwebgazer.setStaticVideo = function(videoLoc) {\n  debugVideoLoc = videoLoc;\n  return webgazer;\n};\n\n/**\n * Set the size of the video viewer\n */\nwebgazer.setVideoViewerSize = function(w, h) {\n\n  webgazer.params.videoViewerWidth = w;\n  webgazer.params.videoViewerHeight = h;\n\n  // Change the video viewer\n  videoElement.style.width = w + 'px';\n  videoElement.style.height = h + 'px';\n\n  // Change video container\n  videoContainerElement.style.width = w + 'px';\n  videoContainerElement.style.height = h + 'px';\n\n  // Change the face overlay\n  faceOverlay.style.width = w + 'px';\n  faceOverlay.style.height = h + 'px';\n\n  // Change the feedback box size\n  // Compute the boundaries of the face overlay validation box based on the video size\n  var tlwh = webgazer.computeValidationBoxSize()\n  // Assign them to the object\n  faceFeedbackBox.style.top = tlwh[0] + 'px';\n  faceFeedbackBox.style.left = tlwh[1] + 'px';\n  faceFeedbackBox.style.width = tlwh[2] + 'px';\n  faceFeedbackBox.style.height = tlwh[3] + 'px';\n};\n\n/**\n *  Add the mouse click and move listeners that add training data.\n *  @return {webgazer} this\n */\nwebgazer.addMouseEventListeners = function() {\n  addMouseEventListeners();\n  return webgazer;\n};\n\n/**\n *  Remove the mouse click and move listeners that add training data.\n *  @return {webgazer} this\n */\nwebgazer.removeMouseEventListeners = function() {\n  removeMouseEventListeners();\n  return webgazer;\n};\n\n/**\n *  Records current screen position for current pupil features.\n *  @param {String} x - position on screen in the x axis\n *  @param {String} y - position on screen in the y axis\n *  @param {String} eventType - \"click\" or \"move\", as per eventTypes\n *  @return {webgazer} this\n */\nwebgazer.recordScreenPosition = function(x, y, eventType) {\n  // give this the same weight that a click gets.\n  recordScreenPosition(x, y, eventType || eventTypes[0]);\n  return webgazer;\n};\n\n/*\n * Stores the position of the fifty most recent tracker preditions\n */\nwebgazer.storePoints = function(x, y, k) {\n  xPast50[k] = x;\n  yPast50[k] = y;\n}\n\n//SETTERS\n/**\n * Sets the tracking module\n * @param {String} name - The name of the tracking module to use\n * @return {webgazer} this\n */\nwebgazer.setTracker = function(name) {\n  if (curTrackerMap[name] === undefined) {\n    console.log('Invalid tracker selection');\n    console.log('Options are: ');\n    for (var t in curTrackerMap) {\n      console.log(t);\n    }\n    return webgazer;\n  }\n  curTracker = curTrackerMap[name]();\n  return webgazer;\n};\n\n/**\n * Sets the regression module and clears any other regression modules\n * @param {String} name - The name of the regression module to use\n * @return {webgazer} this\n */\nwebgazer.setRegression = function(name) {\n  if (regressionMap[name] === undefined) {\n    console.log('Invalid regression selection');\n    console.log('Options are: ');\n    for (var reg in regressionMap) {\n      console.log(reg);\n    }\n    return webgazer;\n  }\n  data = regs[0].getData();\n  regs = [regressionMap[name]()];\n  regs[0].setData(data);\n  return webgazer;\n};\n\n/**\n * Adds a new tracker module so that it can be used by setTracker()\n * @param {String} name - the new name of the tracker\n * @param {Function} constructor - the constructor of the curTracker object\n * @return {webgazer} this\n */\nwebgazer.addTrackerModule = function(name, constructor) {\n  curTrackerMap[name] = function() {\n    return new constructor();\n  };\n};\n\n/**\n * Adds a new regression module so that it can be used by setRegression() and addRegression()\n * @param {String} name - the new name of the regression\n * @param {Function} constructor - the constructor of the regression object\n */\nwebgazer.addRegressionModule = function(name, constructor) {\n  regressionMap[name] = function() {\n    return new constructor();\n  };\n};\n\n/**\n * Adds a new regression module to the list of regression modules, seeding its data from the first regression module\n * @param {String} name - the string name of the regression module to add\n * @return {webgazer} this\n */\nwebgazer.addRegression = function(name) {\n  var newReg = regressionMap[name]();\n  data = regs[0].getData();\n  newReg.setData(data);\n  regs.push(newReg);\n  return webgazer;\n};\n\n/**\n * Sets a callback to be executed on every gaze event (currently all time steps)\n * @param {function} listener - The callback function to call (it must be like function(data, elapsedTime))\n * @return {webgazer} this\n */\nwebgazer.setGazeListener = function(listener) {\n  callback = listener;\n  return webgazer;\n};\n\n/**\n * Removes the callback set by setGazeListener\n * @return {webgazer} this\n */\nwebgazer.clearGazeListener = function() {\n  callback = nopCallback;\n  return webgazer;\n};\n\n/**\n * Set the video element canvas; useful if you want to run WebGazer on your own canvas (e.g., on any random image).\n * @return The current video element canvas\n */\nwebgazer.setVideoElementCanvas = function(canvas) {\n  videoElementCanvas = canvas;\n  return videoElementCanvas;\n}\n\n/**\n * Clear data from localforage and from regs\n */\nwebgazer.clearData = async function() {\n  clearData();\n}\n\n\n//GETTERS\n/**\n * Returns the tracker currently in use\n * @return {tracker} an object following the tracker interface\n */\nwebgazer.getTracker = function() {\n  return curTracker;\n};\n\n/**\n * Returns the regression currently in use\n * @return {Array.<Object>} an array of regression objects following the regression interface\n */\nwebgazer.getRegression = function() {\n  return regs;\n};\n\n/**\n * Requests an immediate prediction\n * @return {object} prediction data object\n */\nwebgazer.getCurrentPrediction = function(regIndex) {\n  return getPrediction(regIndex);\n};\n\n/**\n * returns the different event types that may be passed to regressions when calling regression.addData()\n * @return {Array} array of strings where each string is an event type\n */\nwebgazer.params.getEventTypes = function() {\n  return eventTypes.slice();\n}\n\n/**\n * Get the video element canvas that WebGazer uses internally on which to run its face tracker.\n * @return The current video element canvas\n */\nwebgazer.getVideoElementCanvas = function() {\n  return videoElementCanvas;\n}\n\n/**\n * @return array [a,b] where a is width ratio and b is height ratio\n */\nwebgazer.getVideoPreviewToCameraResolutionRatio = function() {\n  return [webgazer.params.videoViewerWidth / videoElement.videoWidth, webgazer.params.videoViewerHeight / videoElement.videoHeight];\n}\n\n/*\n * Gets the fifty most recent tracker predictions\n */\nwebgazer.getStoredPoints = function() {\n  return [xPast50, yPast50];\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (webgazer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViZ2F6ZXIvc3JjL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUEwQjtBQUMxQjtBQUNBOztBQUVvQjtBQUNjO0FBQ1Y7QUFDYztBQUNFO0FBQ1A7QUFDcUI7QUFDQTtBQUN4Qjs7QUFFOUI7QUFDQTtBQUNBLDhCQUE4QixxREFBVTtBQUN4QyxlQUFlLHFEQUFHO0FBQ2xCLGdDQUFnQyw2REFBZ0I7QUFDaEQsZ0NBQWdDLDZEQUFnQjtBQUNoRCxnQkFBZ0IsaURBQUk7QUFDcEIsa0JBQWtCLG1EQUFNOztBQUV4Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2QkFBNkIsMkNBQTJDO0FBQ3hFO0FBQ0E7QUFDQSx3QkFBd0IscUNBQXFDO0FBQzdELGdDQUFnQyw2Q0FBNkM7QUFDN0UsZ0NBQWdDLDZDQUE2QztBQUM3RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlEQUFJO0FBQzVCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUE4QyxnQ0FBZ0M7QUFDOUU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsaURBQUksUUFBUSxxQkFBcUI7O0FBRWxEO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBLHFFQUFxRTs7QUFFckU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLHFFQUFxRTtBQUNyRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixnREFBbUI7QUFDdEM7O0FBRUE7QUFDQSx1QkFBdUIsZ0RBQW1CO0FBQzFDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDOztBQUU3QztBQUNBLEVBQUUsZ0RBQW1CO0FBQ3JCLEVBQUUsZ0RBQW1CO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSw4Q0FBaUI7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7O0FBRTFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxZQUFZLFVBQVU7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsS0FBSyxTQUFTLGtDQUFrQyxZQUFZLGlDQUFpQztBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLEdBQUc7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLFlBQVksUUFBUTtBQUNwQixZQUFZLFFBQVE7QUFDcEIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQixZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWUsUUFBUSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZWNvbW1lcmNlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvd2ViZ2F6ZXIvc3JjL2luZGV4Lm1qcz9iYWQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlbnNvcmZsb3cvdGZqcyc7XG4vL2ltcG9ydCgvKiB3ZWJwYWNrUHJlbG9hZDogdHJ1ZSAqLyAnQHRlbnNvcmZsb3cvdGZqcycpO1xuLy9pbXBvcnQoLyogd2VicGFja0NodW5rTmFtZTogJ3BhZ2VBJyAqLyAnLi92ZW5kb3Jzfm1haW4uanMnKVxuXG5pbXBvcnQgJ3JlZ3Jlc3Npb24nO1xuaW1wb3J0IHBhcmFtcyBmcm9tICcuL3BhcmFtcy5tanMnO1xuaW1wb3J0ICcuL2RvbV91dGlsLm1qcyc7XG5pbXBvcnQgbG9jYWxmb3JhZ2UgZnJvbSAnbG9jYWxmb3JhZ2UnO1xuaW1wb3J0IFRGRmFjZU1lc2ggZnJvbSAnLi9mYWNlbWVzaC5tanMnO1xuaW1wb3J0IFJlZyBmcm9tICcuL3JpZGdlUmVnLm1qcyc7XG5pbXBvcnQgcmlkZ2VSZWdXZWlnaHRlZCBmcm9tICcuL3JpZGdlV2VpZ2h0ZWRSZWcubWpzJztcbmltcG9ydCByaWRnZVJlZ1RocmVhZGVkIGZyb20gJy4vcmlkZ2VSZWdUaHJlYWRlZC5tanMnO1xuaW1wb3J0IHV0aWwgZnJvbSAnLi91dGlsLm1qcyc7XG5cbmNvbnN0IHdlYmdhemVyID0ge307XG53ZWJnYXplci50cmFja2VyID0ge307XG53ZWJnYXplci50cmFja2VyLlRGRmFjZU1lc2ggPSBURkZhY2VNZXNoO1xud2ViZ2F6ZXIucmVnID0gUmVnO1xud2ViZ2F6ZXIucmVnLlJpZGdlV2VpZ2h0ZWRSZWcgPSByaWRnZVJlZ1dlaWdodGVkLlJpZGdlV2VpZ2h0ZWRSZWc7XG53ZWJnYXplci5yZWcuUmlkZ2VSZWdUaHJlYWRlZCA9IHJpZGdlUmVnVGhyZWFkZWQuUmlkZ2VSZWdUaHJlYWRlZDtcbndlYmdhemVyLnV0aWwgPSB1dGlsO1xud2ViZ2F6ZXIucGFyYW1zID0gcGFyYW1zO1xuXG4vL1BSSVZBVEUgVkFSSUFCTEVTXG5cbi8vdmlkZW8gZWxlbWVudHNcbnZhciB2aWRlb1N0cmVhbSA9IG51bGw7XG52YXIgdmlkZW9Db250YWluZXJFbGVtZW50ID0gbnVsbDtcbnZhciB2aWRlb0VsZW1lbnQgPSBudWxsO1xudmFyIHZpZGVvRWxlbWVudENhbnZhcyA9IG51bGw7XG52YXIgZmFjZU92ZXJsYXkgPSBudWxsO1xudmFyIGZhY2VGZWVkYmFja0JveCA9IG51bGw7XG52YXIgZ2F6ZURvdCA9IG51bGw7XG4vLyBXaHkgaXMgdGhpcyBub3QgaW4gd2ViZ2F6ZXIucGFyYW1zID9cbnZhciBkZWJ1Z1ZpZGVvTG9jID0gJyc7XG5cbi8qXG4gKiBJbml0aWFsaXNlcyB2YXJpYWJsZXMgdXNlZCB0byBzdG9yZSBhY2N1cmFjeSBlaWdlblZhbHVlc1xuICogVGhpcyBpcyB1c2VkIGJ5IHRoZSBjYWxpYnJhdGlvbiBleGFtcGxlIGZpbGVcbiAqL1xudmFyIHhQYXN0NTAgPSBuZXcgQXJyYXkoNTApO1xudmFyIHlQYXN0NTAgPSBuZXcgQXJyYXkoNTApO1xuXG4vLyBsb29wIHBhcmFtZXRlcnNcbnZhciBjbG9ja1N0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG52YXIgbGF0ZXN0RXllRmVhdHVyZXMgPSBudWxsO1xudmFyIGxhdGVzdEdhemVEYXRhID0gbnVsbDtcbnZhciBwYXVzZWQgPSBmYWxzZTtcbi8vcmVnaXN0ZXJlZCBjYWxsYmFjayBmb3IgbG9vcFxudmFyIG5vcENhbGxiYWNrID0gZnVuY3Rpb24oZGF0YSwgdGltZSkge307XG52YXIgY2FsbGJhY2sgPSBub3BDYWxsYmFjaztcblxuLy9UeXBlcyB0aGF0IHJlZ3Jlc3Npb24gc3lzdGVtcyBzaG91bGQgaGFuZGxlXG4vL0Rlc2NyaWJlcyB0aGUgc291cmNlIG9mIGRhdGEgc28gdGhhdCByZWdyZXNzaW9uIHN5c3RlbXMgbWF5IGlnbm9yZSBvciBoYW5kbGUgZGlmZmVyZW50bHkgdGhlIHZhcmlvdXMgZ2VuZXJhdGluZyBldmVudHNcbnZhciBldmVudFR5cGVzID0gWydjbGljaycsICdtb3ZlJ107XG5cbi8vbW92ZWxpc3RlbmVyIHRpbWVvdXQgY2xvY2sgcGFyYW1ldGVyc1xudmFyIG1vdmVDbG9jayA9IHBlcmZvcm1hbmNlLm5vdygpO1xuLy9jdXJyZW50bHkgdXNlZCB0cmFja2VyIGFuZCByZWdyZXNzaW9uIG1vZGVscywgZGVmYXVsdHMgdG8gY2xtdHJhY2tyIGFuZCBsaW5lYXIgcmVncmVzc2lvblxudmFyIGN1clRyYWNrZXIgPSBuZXcgd2ViZ2F6ZXIudHJhY2tlci5URkZhY2VNZXNoKCk7XG52YXIgcmVncyA9IFtuZXcgd2ViZ2F6ZXIucmVnLlJpZGdlUmVnKCldO1xuLy8gdmFyIGJsaW5rRGV0ZWN0b3IgPSBuZXcgd2ViZ2F6ZXIuQmxpbmtEZXRlY3RvcigpO1xuXG4vL2xvb2t1cCB0YWJsZXNcbnZhciBjdXJUcmFja2VyTWFwID0ge1xuICAnVEZGYWNlbWVzaCc6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IHdlYmdhemVyLnRyYWNrZXIuVEZGYWNlTWVzaCgpOyB9LFxufTtcbnZhciByZWdyZXNzaW9uTWFwID0ge1xuICAncmlkZ2UnOiBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyB3ZWJnYXplci5yZWcuUmlkZ2VSZWcoKTsgfSxcbiAgJ3dlaWdodGVkUmlkZ2UnOiBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyB3ZWJnYXplci5yZWcuUmlkZ2VXZWlnaHRlZFJlZygpOyB9LFxuICAndGhyZWFkZWRSaWRnZSc6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IHdlYmdhemVyLnJlZy5SaWRnZVJlZ1RocmVhZGVkKCk7IH0sXG59O1xuXG4vL2xvY2Fsc3RvcmFnZSBuYW1lXG52YXIgbG9jYWxzdG9yYWdlRGF0YUxhYmVsID0gJ3dlYmdhemVyR2xvYmFsRGF0YSc7XG52YXIgbG9jYWxzdG9yYWdlU2V0dGluZ3NMYWJlbCA9ICd3ZWJnYXplckdsb2JhbFNldHRpbmdzJztcbi8vc2V0dGluZ3Mgb2JqZWN0IGZvciBmdXR1cmUgc3RvcmFnZSBvZiBzZXR0aW5nc1xudmFyIHNldHRpbmdzID0ge307XG52YXIgZGF0YSA9IFtdO1xudmFyIGRlZmF1bHRzID0ge1xuICAnZGF0YSc6IFtdLFxuICAnc2V0dGluZ3MnOiB7fVxufTtcblxuXG4vL1BSSVZBVEUgRlVOQ1RJT05TXG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIHNpemUgb2YgdGhlIGZhY2Ugb3ZlcmxheSB2YWxpZGF0aW9uIGJveCBkZXBlbmRpbmcgb24gdGhlIHNpemUgb2YgdGhlIHZpZGVvIHByZXZpZXcgd2luZG93LlxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRpbWVuc2lvbnMgb2YgdGhlIHZhbGlkYXRpb24gYm94IGFzIHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodC5cbiAqL1xud2ViZ2F6ZXIuY29tcHV0ZVZhbGlkYXRpb25Cb3hTaXplID0gZnVuY3Rpb24oKSB7XG5cbiAgdmFyIHZ3ID0gdmlkZW9FbGVtZW50LnZpZGVvV2lkdGg7XG4gIHZhciB2aCA9IHZpZGVvRWxlbWVudC52aWRlb0hlaWdodDtcbiAgdmFyIHB3ID0gcGFyc2VJbnQodmlkZW9FbGVtZW50LnN0eWxlLndpZHRoKTtcbiAgdmFyIHBoID0gcGFyc2VJbnQodmlkZW9FbGVtZW50LnN0eWxlLmhlaWdodCk7XG5cbiAgLy8gRmluZCB0aGUgc2l6ZSBvZiB0aGUgYm94LlxuICAvLyBQaWNrIHRoZSBzbWFsbGVyIG9mIHRoZSB0d28gdmlkZW8gcHJldmlldyBzaXplc1xuICB2YXIgc21hbGxlciA9IE1hdGgubWluKCB2dywgdmggKTtcbiAgdmFyIGxhcmdlciAgPSBNYXRoLm1heCggdncsIHZoICk7XG5cbiAgLy8gT3ZlcmFsbCBzY2FsYXJcbiAgdmFyIHNjYWxhciA9ICggdncgPT0gbGFyZ2VyID8gcHcgLyB2dyA6IHBoIC8gdmggKTtcblxuICAvLyBNdWx0aXBseSB0aGlzIGJ5IDIvMywgdGhlbiBhZGp1c3QgaXQgdG8gdGhlIHNpemUgb2YgdGhlIHByZXZpZXdcbiAgdmFyIGJveFNpemUgPSAoc21hbGxlciAqIHdlYmdhemVyLnBhcmFtcy5mYWNlRmVlZGJhY2tCb3hSYXRpbykgKiBzY2FsYXI7XG5cbiAgLy8gU2V0IHRoZSBib3VuZGFyaWVzIG9mIHRoZSBmYWNlIG92ZXJsYXkgdmFsaWRhdGlvbiBib3ggYmFzZWQgb24gdGhlIHByZXZpZXdcbiAgdmFyIHRvcFZhbCA9IChwaCAtIGJveFNpemUpLzI7XG4gIHZhciBsZWZ0VmFsID0gKHB3IC0gYm94U2l6ZSkvMjtcblxuICAvLyB0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHRcbiAgcmV0dXJuIFt0b3BWYWwsIGxlZnRWYWwsIGJveFNpemUsIGJveFNpemVdXG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBwdXBpbHMgYXJlIGluIHRoZSBwb3NpdGlvbiBib3ggb24gdGhlIHZpZGVvXG4gKi9cbmZ1bmN0aW9uIGNoZWNrRXllc0luVmFsaWRhdGlvbkJveCgpIHtcblxuICBpZiAoZmFjZUZlZWRiYWNrQm94ICE9IG51bGwgJiYgbGF0ZXN0RXllRmVhdHVyZXMpIHtcbiAgICB2YXIgdyA9IHZpZGVvRWxlbWVudC52aWRlb1dpZHRoO1xuICAgIHZhciBoID0gdmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0O1xuXG4gICAgLy8gRmluZCB0aGUgc2l6ZSBvZiB0aGUgYm94LlxuICAgIC8vIFBpY2sgdGhlIHNtYWxsZXIgb2YgdGhlIHR3byB2aWRlbyBwcmV2aWV3IHNpemVzXG4gICAgdmFyIHNtYWxsZXIgPSBNYXRoLm1pbiggdywgaCApO1xuICAgIHZhciBib3hTaXplID0gc21hbGxlciAqIHdlYmdhemVyLnBhcmFtcy5mYWNlRmVlZGJhY2tCb3hSYXRpbztcblxuICAgIC8vIFNldCB0aGUgYm91bmRhcmllcyBvZiB0aGUgZmFjZSBvdmVybGF5IHZhbGlkYXRpb24gYm94IGJhc2VkIG9uIHRoZSBwcmV2aWV3XG4gICAgdmFyIHRvcEJvdW5kID0gKGggLSBib3hTaXplKS8yO1xuICAgIHZhciBsZWZ0Qm91bmQgPSAodyAtIGJveFNpemUpLzI7XG4gICAgdmFyIHJpZ2h0Qm91bmQgPSBsZWZ0Qm91bmQgKyBib3hTaXplO1xuICAgIHZhciBib3R0b21Cb3VuZCA9IHRvcEJvdW5kICsgYm94U2l6ZTtcblxuICAgIC8vZ2V0IHRoZSB4IGFuZCB5IHBvc2l0aW9ucyBvZiB0aGUgbGVmdCBhbmQgcmlnaHQgZXllc1xuICAgIHZhciBleWVMWCA9IGxhdGVzdEV5ZUZlYXR1cmVzLmxlZnQuaW1hZ2V4O1xuICAgIHZhciBleWVMWSA9IGxhdGVzdEV5ZUZlYXR1cmVzLmxlZnQuaW1hZ2V5O1xuICAgIHZhciBleWVSWCA9IGxhdGVzdEV5ZUZlYXR1cmVzLnJpZ2h0LmltYWdleDtcbiAgICB2YXIgZXllUlkgPSBsYXRlc3RFeWVGZWF0dXJlcy5yaWdodC5pbWFnZXk7XG5cblxuICAgIHZhciB4UG9zaXRpb25zID0gZmFsc2U7XG4gICAgdmFyIHlQb3NpdGlvbnMgPSBmYWxzZTtcblxuICAgIC8vIGNoZWNrIGlmIHRoZSB4IHZhbHVlcyBmb3IgdGhlIGxlZnQgYW5kIHJpZ2h0IGV5ZSBhcmUgd2l0aGluIHRoZVxuICAgIC8vIHZhbGlkYXRpb24gYm94XG4gICAgLy8gYWRkIHRoZSB3aWR0aCB3aGVuIGNvbXBhcmluZyBhZ2FpbnN0IHRoZSByaWdodEJvdW5kICh3aGljaCBpcyB0aGUgbGVmdCBlZGdlIG9uIHRoZSBwcmV2aWV3KVxuICAgIGlmIChleWVMWCA+IGxlZnRCb3VuZCAmJiBleWVMWCArIGxhdGVzdEV5ZUZlYXR1cmVzLmxlZnQud2lkdGggPCByaWdodEJvdW5kKSB7XG4gICAgICBpZiAoZXllUlggPiBsZWZ0Qm91bmQgJiYgZXllUlggKyBsYXRlc3RFeWVGZWF0dXJlcy5yaWdodC53aWR0aCA8IHJpZ2h0Qm91bmQpIHtcbiAgICAgICAgeFBvc2l0aW9ucyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9jaGVjayBpZiB0aGUgeSB2YWx1ZXMgZm9yIHRoZSBsZWZ0IGFuZCByaWdodCBleWUgYXJlIHdpdGhpbiB0aGVcbiAgICAvL3ZhbGlkYXRpb24gYm94XG4gICAgaWYgKGV5ZUxZID4gdG9wQm91bmQgJiYgZXllTFkgKyBsYXRlc3RFeWVGZWF0dXJlcy5sZWZ0LmhlaWdodCA8IGJvdHRvbUJvdW5kKSB7XG4gICAgICBpZiAoZXllUlkgPiB0b3BCb3VuZCAmJiBleWVSWSArIGxhdGVzdEV5ZUZlYXR1cmVzLnJpZ2h0LmhlaWdodCA8IGJvdHRvbUJvdW5kKSB7XG4gICAgICAgIHlQb3NpdGlvbnMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vaWYgdGhlIHggYW5kIHkgdmFsdWVzIGZvciBib3RoIHRoZSBsZWZ0IGFuZCByaWdodCBleWUgYXJlIHdpdGhpblxuICAgIC8vdGhlIHZhbGlkYXRpb24gYm94IHRoZW4gdGhlIGJveCBib3JkZXIgdHVybnMgZ3JlZW4sIG90aGVyd2lzZSBpZlxuICAgIC8vdGhlIGV5ZXMgYXJlIG91dHNpZGUgb2YgdGhlIGJveCB0aGUgY29sb3VyIGlzIHJlZFxuICAgIGlmICh4UG9zaXRpb25zICYmIHlQb3NpdGlvbnMpe1xuICAgICAgZmFjZUZlZWRiYWNrQm94LnN0eWxlLmJvcmRlciA9ICdzb2xpZCBncmVlbic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZhY2VGZWVkYmFja0JveC5zdHlsZS5ib3JkZXIgPSAnc29saWQgcmVkJztcbiAgICB9XG4gIH1cbiAgZWxzZVxuICAgIGZhY2VGZWVkYmFja0JveC5zdHlsZS5ib3JkZXIgPSAnc29saWQgYmxhY2snO1xufVxuXG4vKipcbiAqIFRoaXMgZHJhd3MgdGhlIHBvaW50ICh4LHkpIG9udG8gdGhlIGNhbnZhcyBpbiB0aGUgSFRNTFxuICogQHBhcmFtIHtjb2xvdXJ9IGNvbG91ciAtIFRoZSBjb2xvdXIgb2YgdGhlIGNpcmNsZSB0byBwbG90XG4gKiBAcGFyYW0ge3h9IHggLSBUaGUgeCBjby1vcmRpbmF0ZSBvZiB0aGUgZGVzaXJlZCBwb2ludCB0byBwbG90XG4gKiBAcGFyYW0ge3l9IHkgLSBUaGUgeSBjby1vcmRpbmF0ZSBvZiB0aGUgZGVzaXJlZCBwb2ludCB0byBwbG90XG4gKi9cbmZ1bmN0aW9uIGRyYXdDb29yZGluYXRlcyhjb2xvdXIseCx5KXtcbiAgdmFyIGN0eCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxvdHRpbmdfY2FudmFzXCIpLmdldENvbnRleHQoJzJkJyk7XG4gIGN0eC5maWxsU3R5bGUgPSBjb2xvdXI7IC8vIFJlZCBjb2xvclxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgNSwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICBjdHguZmlsbCgpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHB1cGlsIGZlYXR1cmVzIGJ5IGZvbGxvd2luZyB0aGUgcGlwZWxpbmUgd2hpY2ggdGhyZWFkcyBhbiBleWVzIG9iamVjdCB0aHJvdWdoIGVhY2ggY2FsbDpcbiAqIGN1clRyYWNrZXIgZ2V0cyBleWUgcGF0Y2hlcyAtPiBibGluayBkZXRlY3RvciAtPiBwdXBpbCBkZXRlY3Rpb25cbiAqIEBwYXJhbSB7Q2FudmFzfSBjYW52YXMgLSBhIGNhbnZhcyB3aGljaCB3aWxsIGhhdmUgdGhlIHZpZGVvIGRyYXduIG9udG8gaXRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCAtIHRoZSB3aWR0aCBvZiBjYW52YXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHQgLSB0aGUgaGVpZ2h0IG9mIGNhbnZhc1xuICovXG5mdW5jdGlvbiBnZXRQdXBpbEZlYXR1cmVzKGNhbnZhcywgd2lkdGgsIGhlaWdodCkge1xuICBpZiAoIWNhbnZhcykge1xuICAgIHJldHVybjtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBjdXJUcmFja2VyLmdldEV5ZVBhdGNoZXModmlkZW9FbGVtZW50LCBjYW52YXMsIHdpZHRoLCBoZWlnaHQpO1xuICB9IGNhdGNoKGVycikge1xuICAgIGNvbnNvbGUubG9nKFwiY2FuJ3QgZ2V0IHB1cGlsIGZlYXR1cmVzIFwiLCBlcnIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbW9zdCBjdXJyZW50IGZyYW1lIG9mIHZpZGVvIGFuZCBwYWludHMgaXQgdG8gYSByZXNpemVkIHZlcnNpb24gb2YgdGhlIGNhbnZhcyB3aXRoIHdpZHRoIGFuZCBoZWlnaHRcbiAqIEBwYXJhbSB7Q2FudmFzfSBjYW52YXMgLSB0aGUgY2FudmFzIHRvIHBhaW50IHRoZSB2aWRlbyBvbiB0b1xuICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIC0gdGhlIG5ldyB3aWR0aCBvZiB0aGUgY2FudmFzXG4gKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IC0gdGhlIG5ldyBoZWlnaHQgb2YgdGhlIGNhbnZhc1xuICovXG5mdW5jdGlvbiBwYWludEN1cnJlbnRGcmFtZShjYW52YXMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgaWYgKGNhbnZhcy53aWR0aCAhPSB3aWR0aCkge1xuICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICB9XG4gIGlmIChjYW52YXMuaGVpZ2h0ICE9IGhlaWdodCkge1xuICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gIH1cblxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIGN0eC5kcmF3SW1hZ2UodmlkZW9FbGVtZW50LCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xufVxuXG4vKipcbiAqIFBhaW50cyB0aGUgdmlkZW8gdG8gYSBjYW52YXMgYW5kIHJ1bnMgdGhlIHByZWRpY3Rpb24gcGlwZWxpbmUgdG8gZ2V0IGEgcHJlZGljdGlvblxuICogQHBhcmFtIHtOdW1iZXJ8dW5kZWZpbmVkfSByZWdNb2RlbEluZGV4IC0gVGhlIHByZWRpY3Rpb24gaW5kZXggd2UncmUgbG9va2luZyBmb3JcbiAqIEByZXR1cm5zIHsqfVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRQcmVkaWN0aW9uKHJlZ01vZGVsSW5kZXgpIHtcbiAgdmFyIHByZWRpY3Rpb25zID0gW107XG4gIC8vIFsyMDIwMDYxNyB4a10gVE9ETzogdGhpcyBjYWxsIHNob3VsZCBiZSBtYWRlIGFzeW5jIHNvbWVob3cuIHdpbGwgdGFrZSBzb21lIHdvcmsuXG4gIGxhdGVzdEV5ZUZlYXR1cmVzID0gYXdhaXQgZ2V0UHVwaWxGZWF0dXJlcyh2aWRlb0VsZW1lbnRDYW52YXMsIHZpZGVvRWxlbWVudENhbnZhcy53aWR0aCwgdmlkZW9FbGVtZW50Q2FudmFzLmhlaWdodCk7XG5cbiAgaWYgKHJlZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc29sZS5sb2coJ3JlZ3Jlc3Npb24gbm90IHNldCwgY2FsbCBzZXRSZWdyZXNzaW9uKCknKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmb3IgKHZhciByZWcgaW4gcmVncykge1xuICAgIHByZWRpY3Rpb25zLnB1c2gocmVnc1tyZWddLnByZWRpY3QobGF0ZXN0RXllRmVhdHVyZXMpKTtcbiAgfVxuICBpZiAocmVnTW9kZWxJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHByZWRpY3Rpb25zW3JlZ01vZGVsSW5kZXhdID09PSBudWxsID8gbnVsbCA6IHtcbiAgICAgICd4JyA6IHByZWRpY3Rpb25zW3JlZ01vZGVsSW5kZXhdLngsXG4gICAgICAneScgOiBwcmVkaWN0aW9uc1tyZWdNb2RlbEluZGV4XS55LFxuICAgICAgJ2V5ZUZlYXR1cmVzJzogbGF0ZXN0RXllRmVhdHVyZXNcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmVkaWN0aW9ucy5sZW5ndGggPT09IDAgfHwgcHJlZGljdGlvbnNbMF0gPT09IG51bGwgPyBudWxsIDoge1xuICAgICAgJ3gnIDogcHJlZGljdGlvbnNbMF0ueCxcbiAgICAgICd5JyA6IHByZWRpY3Rpb25zWzBdLnksXG4gICAgICAnZXllRmVhdHVyZXMnOiBsYXRlc3RFeWVGZWF0dXJlcyxcbiAgICAgICdhbGwnIDogcHJlZGljdGlvbnNcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogUnVucyBldmVyeSBhdmFpbGFibGUgYW5pbWF0aW9uIGZyYW1lIGlmIHdlYmdhemVyIGlzIG5vdCBwYXVzZWRcbiAqL1xudmFyIHNtb290aGluZ1ZhbHMgPSBuZXcgdXRpbC5EYXRhV2luZG93KDQpO1xudmFyIGsgPSAwO1xuXG5hc3luYyBmdW5jdGlvbiBsb29wKCkge1xuICBpZiAoIXBhdXNlZCkge1xuXG4gICAgLy8gWzIwMjAwNjE3IFhLXSBUT0RPOiB0aGVyZSBpcyBjdXJyZW50bHkgbGFnIGJldHdlZW4gdGhlIGNhbWVyYSBpbnB1dCBhbmQgdGhlIGZhY2Ugb3ZlcmxheS4gVGhpcyBiZWhhdmlvclxuICAgIC8vIGlzIG5vdCBzZWVuIGluIHRoZSBmYWNlbWVzaCBkZW1vLiBwcm9iYWJseSBuZWVkIHRvIG9wdGltaXplIGFzeW5jIGltcGxlbWVudGF0aW9uLiBJIHRoaW5rIHRoZSBpc3N1ZSBsaWVzXG4gICAgLy8gaW4gdGhlIGltcGxlbWVudGF0aW9uIG9mIGdldFByZWRpY3Rpb24oKS5cblxuICAgIC8vIFBhaW50IHRoZSBsYXRlc3QgdmlkZW8gZnJhbWUgaW50byB0aGUgY2FudmFzIHdoaWNoIHdpbGwgYmUgYW5hbHl6ZWQgYnkgV2ViR2F6ZXJcbiAgICAvLyBbMjAxODA3MjkgSlRdIFdoeSBkbyB3ZSBuZWVkIHRvIGRvIHRoaXM/IGNsbVRyYWNrZXIgZG9lcyB0aGlzIGl0c2VsZiBfYWxyZWFkeV8sIHdoaWNoIGlzIGp1c3QgZHVwbGljYXRpbmcgdGhlIHdvcmsuXG4gICAgLy8gSXMgaXQgYmVjYXVzZSBvdGhlciB0cmFja2VycyBuZWVkIGEgY2FudmFzIGluc3RlYWQgb2YgYW4gaW1nL3ZpZGVvIGVsZW1lbnQ/XG4gICAgcGFpbnRDdXJyZW50RnJhbWUodmlkZW9FbGVtZW50Q2FudmFzLCB2aWRlb0VsZW1lbnRDYW52YXMud2lkdGgsIHZpZGVvRWxlbWVudENhbnZhcy5oZWlnaHQpO1xuXG4gICAgLy8gR2V0IGdhemUgcHJlZGljdGlvbiAoYXNrIGNsbSB0byB0cmFjazsgcGFzcyB0aGUgZGF0YSB0byB0aGUgcmVncmVzc29yOyBnZXQgYmFjayBhIHByZWRpY3Rpb24pXG4gICAgbGF0ZXN0R2F6ZURhdGEgPSBnZXRQcmVkaWN0aW9uKCk7XG4gICAgLy8gQ291bnQgdGltZVxuICAgIHZhciBlbGFwc2VkVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gY2xvY2tTdGFydDtcblxuICAgIC8vIERyYXcgZmFjZSBvdmVybGF5XG4gICAgaWYoIHdlYmdhemVyLnBhcmFtcy5zaG93RmFjZU92ZXJsYXkgKVxuICAgIHtcbiAgICAgIC8vIEdldCB0cmFja2VyIG9iamVjdFxuICAgICAgdmFyIHRyYWNrZXIgPSB3ZWJnYXplci5nZXRUcmFja2VyKCk7XG4gICAgICBmYWNlT3ZlcmxheS5nZXRDb250ZXh0KCcyZCcpLmNsZWFyUmVjdCggMCwgMCwgdmlkZW9FbGVtZW50LnZpZGVvV2lkdGgsIHZpZGVvRWxlbWVudC52aWRlb0hlaWdodCk7XG4gICAgICB0cmFja2VyLmRyYXdGYWNlT3ZlcmxheShmYWNlT3ZlcmxheS5nZXRDb250ZXh0KCcyZCcpLCB0cmFja2VyLmdldFBvc2l0aW9ucygpKTtcbiAgICB9XG5cbiAgICAvLyBGZWVkYmFjayBib3hcbiAgICAvLyBDaGVjayB0aGF0IHRoZSBleWVzIGFyZSBpbnNpZGUgb2YgdGhlIHZhbGlkYXRpb24gYm94XG4gICAgaWYoIHdlYmdhemVyLnBhcmFtcy5zaG93RmFjZUZlZWRiYWNrQm94IClcbiAgICAgIGNoZWNrRXllc0luVmFsaWRhdGlvbkJveCgpO1xuXG4gICAgbGF0ZXN0R2F6ZURhdGEgPSBhd2FpdCBsYXRlc3RHYXplRGF0YTtcblxuICAgIC8vIFsyMDIwMDYyMyB4a10gY2FsbGJhY2sgdG8gZnVuY3Rpb24gcGFzc2VkIGludG8gc2V0R2F6ZUxpc3RlbmVyKGZuKVxuICAgIGNhbGxiYWNrKGxhdGVzdEdhemVEYXRhLCBlbGFwc2VkVGltZSk7XG5cbiAgICBpZiggbGF0ZXN0R2F6ZURhdGEgKSB7XG4gICAgICAvLyBbMjAyMDA2MDggWEtdIFNtb290aGluZyBhY3Jvc3MgdGhlIG1vc3QgcmVjZW50IDQgcHJlZGljdGlvbnMsIGRvIHdlIG5lZWQgdGhpcyB3aXRoIEthbG1hbiBmaWx0ZXI/XG4gICAgICBzbW9vdGhpbmdWYWxzLnB1c2gobGF0ZXN0R2F6ZURhdGEpO1xuICAgICAgdmFyIHggPSAwO1xuICAgICAgdmFyIHkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHNtb290aGluZ1ZhbHMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgZCBpbiBzbW9vdGhpbmdWYWxzLmRhdGEpIHtcbiAgICAgICAgeCArPSBzbW9vdGhpbmdWYWxzLmdldChkKS54O1xuICAgICAgICB5ICs9IHNtb290aGluZ1ZhbHMuZ2V0KGQpLnk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmVkID0gdXRpbC5ib3VuZCh7J3gnOngvbGVuLCAneSc6eS9sZW59KTtcblxuICAgICAgaWYgKHdlYmdhemVyLnBhcmFtcy5zdG9yaW5nUG9pbnRzKSB7XG4gICAgICAgIGRyYXdDb29yZGluYXRlcygnYmx1ZScscHJlZC54LHByZWQueSk7IC8vZHJhd3MgdGhlIHByZXZpb3VzIHByZWRpY3Rpb25zXG4gICAgICAgIC8vc3RvcmUgdGhlIHBvc2l0aW9uIG9mIHRoZSBwYXN0IGZpZnR5IG9jY3VyaW5nIHRyYWNrZXIgcHJlZGl0aW9uc1xuICAgICAgICB3ZWJnYXplci5zdG9yZVBvaW50cyhwcmVkLngsIHByZWQueSwgayk7XG4gICAgICAgIGsrKztcbiAgICAgICAgaWYgKGsgPT0gNTApIHtcbiAgICAgICAgICBrID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gR2F6ZURvdFxuICAgICAgaWYgKHdlYmdhemVyLnBhcmFtcy5zaG93R2F6ZURvdCkge1xuICAgICAgICBnYXplRG90LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgfVxuICAgICAgZ2F6ZURvdC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoJyArIHByZWQueCArICdweCwnICsgcHJlZC55ICsgJ3B4LDApJztcbiAgICB9IGVsc2Uge1xuICAgICAgZ2F6ZURvdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgfVxufVxuXG4vL2lzIHByb2JsZW1hdGljIHRvIHRlc3Rcbi8vYmVjYXVzZSBsYXRlc3RFeWVGZWF0dXJlcyBpcyBub3Qgc2V0IGluIG1hbnkgY2FzZXNcblxuLyoqXG4gKiBSZWNvcmRzIHNjcmVlbiBwb3NpdGlvbiBkYXRhIGJhc2VkIG9uIGN1cnJlbnQgcHVwaWwgZmVhdHVyZSBhbmQgcGFzc2VzIGl0XG4gKiB0byB0aGUgcmVncmVzc2lvbiBtb2RlbC5cbiAqIEBwYXJhbSB7TnVtYmVyfSB4IC0gVGhlIHggc2NyZWVuIHBvc2l0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0geSAtIFRoZSB5IHNjcmVlbiBwb3NpdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50VHlwZSAtIFRoZSBldmVudCB0eXBlIHRvIHN0b3JlXG4gKiBAcmV0dXJucyB7bnVsbH1cbiAqL1xudmFyIHJlY29yZFNjcmVlblBvc2l0aW9uID0gZnVuY3Rpb24oeCwgeSwgZXZlbnRUeXBlKSB7XG4gIGlmIChwYXVzZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHJlZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc29sZS5sb2coJ3JlZ3Jlc3Npb24gbm90IHNldCwgY2FsbCBzZXRSZWdyZXNzaW9uKCknKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmb3IgKHZhciByZWcgaW4gcmVncykge1xuICAgIGlmKCBsYXRlc3RFeWVGZWF0dXJlcyApXG4gICAgICByZWdzW3JlZ10uYWRkRGF0YShsYXRlc3RFeWVGZWF0dXJlcywgW3gsIHldLCBldmVudFR5cGUpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlY29yZHMgY2xpY2sgZGF0YSBhbmQgcGFzc2VzIGl0IHRvIHRoZSByZWdyZXNzaW9uIG1vZGVsXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBsaXN0ZW5lZCBldmVudFxuICovXG52YXIgY2xpY2tMaXN0ZW5lciA9IGFzeW5jIGZ1bmN0aW9uKGV2ZW50KSB7XG4gIHJlY29yZFNjcmVlblBvc2l0aW9uKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFksIGV2ZW50VHlwZXNbMF0pOyAvLyBldmVudFR5cGVbMF0gPT09ICdjbGljaydcblxuICBpZiAod2ViZ2F6ZXIucGFyYW1zLnNhdmVEYXRhQWNyb3NzU2Vzc2lvbnMpIHtcbiAgICAvLyBFYWNoIGNsaWNrIHN0b3JlcyB0aGUgbmV4dCBkYXRhIHBvaW50IGludG8gbG9jYWxmb3JhZ2UuXG4gICAgYXdhaXQgc2V0R2xvYmFsRGF0YSgpO1xuXG4gICAgLy8gLy8gRGVidWcgbGluZVxuICAgIC8vIGNvbnNvbGUubG9nKCdNb2RlbCBzaXplOiAnICsgSlNPTi5zdHJpbmdpZnkoYXdhaXQgbG9jYWxmb3JhZ2UuZ2V0SXRlbShsb2NhbHN0b3JhZ2VEYXRhTGFiZWwpKS5sZW5ndGggLyAxMDAwMDAwICsgJ01CJyk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVjb3JkcyBtb3VzZSBtb3ZlbWVudCBkYXRhIGFuZCBwYXNzZXMgaXQgdG8gdGhlIHJlZ3Jlc3Npb24gbW9kZWxcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGxpc3RlbmVkIGV2ZW50XG4gKi9cbnZhciBtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICBpZiAocGF1c2VkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICBpZiAobm93IDwgbW92ZUNsb2NrICsgd2ViZ2F6ZXIucGFyYW1zLm1vdmVUaWNrU2l6ZSkge1xuICAgIHJldHVybjtcbiAgfSBlbHNlIHtcbiAgICBtb3ZlQ2xvY2sgPSBub3c7XG4gIH1cbiAgcmVjb3JkU2NyZWVuUG9zaXRpb24oZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSwgZXZlbnRUeXBlc1sxXSk7IC8vZXZlbnRUeXBlWzFdID09PSAnbW92ZSdcbn07XG5cbi8qKlxuICogQWRkIGV2ZW50IGxpc3RlbmVycyBmb3IgbW91c2UgY2xpY2sgYW5kIG1vdmUuXG4gKi9cbnZhciBhZGRNb3VzZUV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24oKSB7XG4gIC8vdGhpcmQgYXJndW1lbnQgc2V0IHRvIHRydWUgc28gdGhhdCB3ZSBnZXQgZXZlbnQgb24gJ2NhcHR1cmUnIGluc3RlYWQgb2YgJ2J1YmJsaW5nJ1xuICAvL3RoaXMgcHJldmVudHMgYSBjbGllbnQgdXNpbmcgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkgcHJldmVudGluZyBvdXIgYWNjZXNzIHRvIHRoZSBjbGlja1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsaWNrTGlzdGVuZXIsIHRydWUpO1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3ZlTGlzdGVuZXIsIHRydWUpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIGZvciBtb3VzZSBjbGljayBhbmQgbW92ZS5cbiAqL1xudmFyIHJlbW92ZU1vdXNlRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbigpIHtcbiAgLy8gbXVzdCBzZXQgdGhpcmQgYXJndW1lbnQgdG8gc2FtZSB2YWx1ZSB1c2VkIGluIGFkZE1vdXNlRXZlbnRMaXN0ZW5lcnNcbiAgLy8gZm9yIHRoaXMgdG8gd29yay5cbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGlja0xpc3RlbmVyLCB0cnVlKTtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW92ZUxpc3RlbmVyLCB0cnVlKTtcbn07XG5cbi8qKlxuICogTG9hZHMgdGhlIGdsb2JhbCBkYXRhIGFuZCBwYXNzZXMgaXQgdG8gdGhlIHJlZ3Jlc3Npb24gbW9kZWxcbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZEdsb2JhbERhdGEoKSB7XG4gIC8vIEdldCBzZXR0aW5ncyBvYmplY3QgZnJvbSBsb2NhbGZvcmFnZVxuICAvLyBbMjAyMDA2MTEgeGtdIHN0aWxsIHVuc3VyZSB3aGF0IHRoaXMgZG9lcywgbWF5YmUgd291bGQgYmUgZ29vZCBmb3IgS2FsbWFuIGZpbHRlciBzZXR0aW5ncyBldGM/XG4gIHNldHRpbmdzID0gYXdhaXQgbG9jYWxmb3JhZ2UuZ2V0SXRlbShsb2NhbHN0b3JhZ2VTZXR0aW5nc0xhYmVsKTtcbiAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCBkZWZhdWx0cztcblxuICAvLyBHZXQgY2xpY2sgZGF0YSBmcm9tIGxvY2FsZm9yYWdlXG4gIHZhciBsb2FkRGF0YSA9IGF3YWl0IGxvY2FsZm9yYWdlLmdldEl0ZW0obG9jYWxzdG9yYWdlRGF0YUxhYmVsKTtcbiAgbG9hZERhdGEgPSBsb2FkRGF0YSB8fCBkZWZhdWx0cztcblxuICAvLyBTZXQgZ2xvYmFsIHZhciBkYXRhIHRvIG5ld2x5IGxvYWRlZCBkYXRhXG4gIGRhdGEgPSBsb2FkRGF0YTtcblxuICAvLyBMb2FkIGRhdGEgaW50byByZWdyZXNzaW9uIG1vZGVsKHMpXG4gIGZvciAodmFyIHJlZyBpbiByZWdzKSB7XG4gICAgcmVnc1tyZWddLnNldERhdGEobG9hZERhdGEpO1xuICB9XG5cbiAgY29uc29sZS5sb2coXCJsb2FkZWQgc3RvcmVkIGRhdGEgaW50byByZWdyZXNzaW9uIG1vZGVsXCIpO1xufVxuXG4vKipcbiAqIEFkZHMgZGF0YSB0byBsb2NhbGZvcmFnZVxuICovXG5hc3luYyBmdW5jdGlvbiBzZXRHbG9iYWxEYXRhKCkge1xuICAvLyBHcmFiIGRhdGEgZnJvbSByZWdyZXNzaW9uIG1vZGVsXG4gIHZhciBzdG9yZURhdGEgPSByZWdzWzBdLmdldERhdGEoKSB8fCBkYXRhOyAvLyBBcnJheVxuXG4gIC8vIFN0b3JlIGRhdGEgaW50byBsb2NhbGZvcmFnZVxuICBsb2NhbGZvcmFnZS5zZXRJdGVtKGxvY2Fsc3RvcmFnZVNldHRpbmdzTGFiZWwsIHNldHRpbmdzKSAvLyBbMjAyMDA2MDUgWEtdIGlzICdzZXR0aW5ncycgZXZlciBiZWluZyB1c2VkP1xuICBsb2NhbGZvcmFnZS5zZXRJdGVtKGxvY2Fsc3RvcmFnZURhdGFMYWJlbCwgc3RvcmVEYXRhKTtcbiAgLy9UT0RPIGRhdGEgc2hvdWxkIHByb2JhYmx5IGJlIHN0b3JlZCBpbiB3ZWJnYXplciBvYmplY3QgaW5zdGVhZCBvZiBlYWNoIHJlZ3Jlc3Npb24gbW9kZWxcbiAgLy8gICAgIC0+IHJlcXVpcmVzIGR1cGxpY2F0aW9uIG9mIGRhdGEsIGJ1dCBpcyBsaWtlbHkgZWFzaWVyIG9uIHJlZ3Jlc3Npb24gbW9kZWwgaW1wbGVtZW50b3JzXG59XG5cbi8qKlxuICogQ2xlYXJzIGRhdGEgZnJvbSBtb2RlbCBhbmQgZ2xvYmFsIHN0b3JhZ2VcbiAqL1xuZnVuY3Rpb24gY2xlYXJEYXRhKCkge1xuICAvLyBSZW1vdmVzIGRhdGEgZnJvbSBsb2NhbGZvcmFnZVxuICBsb2NhbGZvcmFnZS5jbGVhcigpO1xuXG4gIC8vIFJlbW92ZXMgZGF0YSBmcm9tIHJlZ3Jlc3Npb24gbW9kZWxcbiAgZm9yICh2YXIgcmVnIGluIHJlZ3MpIHtcbiAgICByZWdzW3JlZ10uaW5pdCgpO1xuICB9XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYWxsIG5lZWRlZCBkb20gZWxlbWVudHMgYW5kIGJlZ2lucyB0aGUgbG9vcFxuICogQHBhcmFtIHtVUkx9IHN0cmVhbSAtIFRoZSB2aWRlbyBzdHJlYW0gdG8gdXNlXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGluaXQoc3RyZWFtKSB7XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFZpZGVvIGFuZCB2aWRlbyBwcmV2aWV3XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHZhciB0b3BEaXN0ID0gJzBweCdcbiAgdmFyIGxlZnREaXN0ID0gJzBweCdcblxuICAvLyB1c2VkIGZvciB3ZWJnYXplci5zdG9wVmlkZW8oKSBhbmQgd2ViZ2F6ZXIuc2V0Q2FtZXJhQ29uc3RyYWludHMoKVxuICB2aWRlb1N0cmVhbSA9IHN0cmVhbTtcblxuICAvLyBjcmVhdGUgYSB2aWRlbyBlbGVtZW50IGNvbnRhaW5lciB0byBlbmFibGUgY3VzdG9taXphYmxlIHBsYWNlbWVudCBvbiB0aGUgcGFnZVxuICB2aWRlb0NvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmlkZW9Db250YWluZXJFbGVtZW50LmlkID0gd2ViZ2F6ZXIucGFyYW1zLnZpZGVvQ29udGFpbmVySWQ7XG5cbiAgdmlkZW9Db250YWluZXJFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgdmlkZW9Db250YWluZXJFbGVtZW50LnN0eWxlLnRvcCA9IHRvcERpc3Q7XG4gIHZpZGVvQ29udGFpbmVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gbGVmdERpc3Q7XG4gIHZpZGVvQ29udGFpbmVyRWxlbWVudC5zdHlsZS53aWR0aCA9IHdlYmdhemVyLnBhcmFtcy52aWRlb1ZpZXdlcldpZHRoICsgJ3B4JztcbiAgdmlkZW9Db250YWluZXJFbGVtZW50LnN0eWxlLmhlaWdodCA9IHdlYmdhemVyLnBhcmFtcy52aWRlb1ZpZXdlckhlaWdodCArICdweCc7XG4gIGhpZGVWaWRlb0VsZW1lbnQodmlkZW9Db250YWluZXJFbGVtZW50KTtcblxuICB2aWRlb0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICB2aWRlb0VsZW1lbnQuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICcnKTtcbiAgdmlkZW9FbGVtZW50LmlkID0gd2ViZ2F6ZXIucGFyYW1zLnZpZGVvRWxlbWVudElkO1xuICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gc3RyZWFtO1xuICB2aWRlb0VsZW1lbnQuYXV0b3BsYXkgPSB0cnVlO1xuICB2aWRlb0VsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAvLyBXZSBzZXQgdGhlc2UgdG8gc3RvcCB0aGUgdmlkZW8gYXBwZWFyaW5nIHRvbyBsYXJnZSB3aGVuIGl0IGlzIGFkZGVkIGZvciB0aGUgdmVyeSBmaXJzdCB0aW1lXG4gIHZpZGVvRWxlbWVudC5zdHlsZS53aWR0aCA9IHdlYmdhemVyLnBhcmFtcy52aWRlb1ZpZXdlcldpZHRoICsgJ3B4JztcbiAgdmlkZW9FbGVtZW50LnN0eWxlLmhlaWdodCA9IHdlYmdhemVyLnBhcmFtcy52aWRlb1ZpZXdlckhlaWdodCArICdweCc7XG4gIGhpZGVWaWRlb0VsZW1lbnQodmlkZW9FbGVtZW50KTtcbiAgLy8gdmlkZW9FbGVtZW50LnN0eWxlLnpJbmRleD1cIi0xXCI7XG5cbiAgLy8gQ2FudmFzIGZvciBkcmF3aW5nIHZpZGVvIHRvIHBhc3MgdG8gY2xtIHRyYWNrZXJcbiAgdmlkZW9FbGVtZW50Q2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIHZpZGVvRWxlbWVudENhbnZhcy5pZCA9IHdlYmdhemVyLnBhcmFtcy52aWRlb0VsZW1lbnRDYW52YXNJZDtcbiAgdmlkZW9FbGVtZW50Q2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgLy8gRmFjZSBvdmVybGF5XG4gIC8vIFNob3dzIHRoZSBDTE0gdHJhY2tpbmcgcmVzdWx0XG4gIGZhY2VPdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGZhY2VPdmVybGF5LmlkID0gd2ViZ2F6ZXIucGFyYW1zLmZhY2VPdmVybGF5SWQ7XG4gIGZhY2VPdmVybGF5LnN0eWxlLmRpc3BsYXkgPSB3ZWJnYXplci5wYXJhbXMuc2hvd0ZhY2VPdmVybGF5ID8gJ2Jsb2NrJyA6ICdub25lJztcbiAgZmFjZU92ZXJsYXkuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXG4gIC8vIE1pcnJvciB2aWRlbyBmZWVkXG4gIGlmICh3ZWJnYXplci5wYXJhbXMubWlycm9yVmlkZW8pIHtcbiAgICB2aWRlb0VsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItbW96LXRyYW5zZm9ybVwiLCBcInNjYWxlKC0xLCAxKVwiKTtcbiAgICB2aWRlb0VsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItd2Via2l0LXRyYW5zZm9ybVwiLCBcInNjYWxlKC0xLCAxKVwiKTtcbiAgICB2aWRlb0VsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItby10cmFuc2Zvcm1cIiwgXCJzY2FsZSgtMSwgMSlcIik7XG4gICAgdmlkZW9FbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwidHJhbnNmb3JtXCIsIFwic2NhbGUoLTEsIDEpXCIpO1xuICAgIHZpZGVvRWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcImZpbHRlclwiLCBcIkZsaXBIXCIpO1xuICAgIGZhY2VPdmVybGF5LnN0eWxlLnNldFByb3BlcnR5KFwiLW1vei10cmFuc2Zvcm1cIiwgXCJzY2FsZSgtMSwgMSlcIik7XG4gICAgZmFjZU92ZXJsYXkuc3R5bGUuc2V0UHJvcGVydHkoXCItd2Via2l0LXRyYW5zZm9ybVwiLCBcInNjYWxlKC0xLCAxKVwiKTtcbiAgICBmYWNlT3ZlcmxheS5zdHlsZS5zZXRQcm9wZXJ0eShcIi1vLXRyYW5zZm9ybVwiLCBcInNjYWxlKC0xLCAxKVwiKTtcbiAgICBmYWNlT3ZlcmxheS5zdHlsZS5zZXRQcm9wZXJ0eShcInRyYW5zZm9ybVwiLCBcInNjYWxlKC0xLCAxKVwiKTtcbiAgICBmYWNlT3ZlcmxheS5zdHlsZS5zZXRQcm9wZXJ0eShcImZpbHRlclwiLCBcIkZsaXBIXCIpO1xuICB9XG5cbiAgLy8gRmVlZGJhY2sgYm94XG4gIC8vIExldHMgdGhlIHVzZXIga25vdyB3aGVuIHRoZWlyIGZhY2UgaXMgaW4gdGhlIG1pZGRsZVxuICBmYWNlRmVlZGJhY2tCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgZmFjZUZlZWRiYWNrQm94LmlkID0gd2ViZ2F6ZXIucGFyYW1zLmZhY2VGZWVkYmFja0JveElkO1xuICBmYWNlRmVlZGJhY2tCb3guc3R5bGUuZGlzcGxheSA9IHdlYmdhemVyLnBhcmFtcy5zaG93RmFjZUZlZWRiYWNrQm94ID8gJ2Jsb2NrJyA6ICdub25lJztcbiAgZmFjZUZlZWRiYWNrQm94LnN0eWxlLmJvcmRlciA9ICdzb2xpZCc7XG4gIGZhY2VGZWVkYmFja0JveC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cbiAgLy8gR2F6ZSBkb3RcbiAgLy8gU3RhcnRzIG9mZnNjcmVlblxuICBnYXplRG90ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGdhemVEb3QuaWQgPSB3ZWJnYXplci5wYXJhbXMuZ2F6ZURvdElkO1xuICBnYXplRG90LnN0eWxlLmRpc3BsYXkgPSB3ZWJnYXplci5wYXJhbXMuc2hvd0dhemVEb3QgPyAnYmxvY2snIDogJ25vbmUnO1xuICBnYXplRG90LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgZ2F6ZURvdC5zdHlsZS56SW5kZXggPSA5OTk5OTtcbiAgZ2F6ZURvdC5zdHlsZS5sZWZ0ID0gJy01cHgnO1xuICBnYXplRG90LnN0eWxlLnRvcCAgPSAnLTVweCc7XG4gIGdhemVEb3Quc3R5bGUuYmFja2dyb3VuZCA9ICdyZWQnO1xuICBnYXplRG90LnN0eWxlLmJvcmRlclJhZGl1cyA9ICcxMDAlJztcbiAgZ2F6ZURvdC5zdHlsZS5vcGFjaXR5ID0gJzAuNyc7XG4gIGdhemVEb3Quc3R5bGUud2lkdGggPSAnMTBweCc7XG4gIGdhemVEb3Quc3R5bGUuaGVpZ2h0ID0gJzEwcHgnO1xuXG4gIC8vIEFkZCBvdGhlciBwcmV2aWV3L2ZlZWRiYWNrIGVsZW1lbnRzIHRvIHRoZSBzY3JlZW4gb25jZSB0aGUgdmlkZW8gaGFzIHNob3duIGFuZCBpdHMgcGFyYW1ldGVycyBhcmUgaW5pdGlhbGl6ZWRcbiAgdmlkZW9Db250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKHZpZGVvRWxlbWVudCk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodmlkZW9Db250YWluZXJFbGVtZW50KTtcbiAgY29uc3QgdmlkZW9QcmV2aWV3U2V0dXAgPSBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XG4gICAgZnVuY3Rpb24gc2V0dXBQcmV2aWV3VmlkZW8oZSkge1xuXG4gICAgICAvLyBBbGwgdmlkZW8gcHJldmlldyBwYXJ0cyBoYXZlIG5vdyBiZWVuIGFkZGVkLCBzbyBzZXQgdGhlIHNpemUgYm90aCBpbnRlcm5hbGx5IGFuZCBpbiB0aGUgcHJldmlldyB3aW5kb3cuXG4gICAgICBzZXRJbnRlcm5hbFZpZGVvQnVmZmVyU2l6ZXMoIHZpZGVvRWxlbWVudC52aWRlb1dpZHRoLCB2aWRlb0VsZW1lbnQudmlkZW9IZWlnaHQgKTtcbiAgICAgIHdlYmdhemVyLnNldFZpZGVvVmlld2VyU2l6ZSggd2ViZ2F6ZXIucGFyYW1zLnZpZGVvVmlld2VyV2lkdGgsIHdlYmdhemVyLnBhcmFtcy52aWRlb1ZpZXdlckhlaWdodCApO1xuXG4gICAgICB2aWRlb0NvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQodmlkZW9FbGVtZW50Q2FudmFzKTtcbiAgICAgIHZpZGVvQ29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChmYWNlT3ZlcmxheSk7XG4gICAgICB2aWRlb0NvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZmFjZUZlZWRiYWNrQm94KTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZ2F6ZURvdCk7XG5cbiAgICAgIC8vIFJ1biB0aGlzIG9ubHkgb25jZSwgc28gcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lclxuICAgICAgZS50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLnR5cGUsIHNldHVwUHJldmlld1ZpZGVvKTtcbiAgICAgIHJlcygpO1xuICAgIH07XG4gICAgdmlkZW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZGRhdGEnLCBzZXR1cFByZXZpZXdWaWRlbyk7XG4gIH0pO1xuXG4gIGFkZE1vdXNlRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAvL0JFR0lOIENBTExCQUNLIExPT1BcbiAgcGF1c2VkID0gZmFsc2U7XG4gIGNsb2NrU3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICBhd2FpdCB2aWRlb1ByZXZpZXdTZXR1cDtcbiAgYXdhaXQgbG9vcCgpO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhXG4gKiBkZXBlbmRpbmcgb24gdGhlIGJyb3dzZXIgY2FwYWJpbGl0aWVzXG4gKlxuICogQHJldHVybiBQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIHNldFVzZXJNZWRpYVZhcmlhYmxlKCl7XG5cbiAgaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMgPT09IHVuZGVmaW5lZCkge1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMgPSB7fTtcbiAgfVxuXG4gIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgPSBmdW5jdGlvbihjb25zdHJhaW50cykge1xuXG4gICAgICAvLyBnZXRzIHRoZSBhbHRlcm5hdGl2ZSBvbGQgZ2V0VXNlck1lZGlhIGlzIHBvc3NpYmxlXG4gICAgICB2YXIgZ2V0VXNlck1lZGlhID0gbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSB8fCBuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhO1xuXG4gICAgICAvLyBzZXQgYW4gZXJyb3IgbWVzc2FnZSBpZiBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBnZXRVc2VyTWVkaWFcbiAgICAgIGlmICghZ2V0VXNlck1lZGlhKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbmZvcnR1bmF0ZWx5LCB5b3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBhY2Nlc3MgdG8gdGhlIHdlYmNhbSB0aHJvdWdoIHRoZSBnZXRVc2VyTWVkaWEgQVBJLiBUcnkgdG8gdXNlIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiBHb29nbGUgQ2hyb21lLCBNb3ppbGxhIEZpcmVmb3gsIE9wZXJhLCBvciBNaWNyb3NvZnQgRWRnZSBpbnN0ZWFkLlwiKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHVzZXMgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSBmb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZ2V0VXNlck1lZGlhLmNhbGwobmF2aWdhdG9yLCBjb25zdHJhaW50cywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG4vL1BVQkxJQyBGVU5DVElPTlMgLSBDT05UUk9MXG5cbi8qKlxuICogU3RhcnRzIGFsbCBzdGF0ZSByZWxhdGVkIHRvIHdlYmdhemVyIC0+IGRhdGFMb29wLCB2aWRlbyBjb2xsZWN0aW9uLCBjbGljayBsaXN0ZW5lclxuICogSWYgc3RhcnRpbmcgZmFpbHMsIGNhbGwgYG9uRmFpbGAgcGFyYW0gZnVuY3Rpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZhaWwgLSBDYWxsYmFjayB0byBjYWxsIGluIGNhc2UgaXQgaXMgaW1wb3NzaWJsZSB0byBmaW5kIHVzZXIgY2FtZXJhXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xud2ViZ2F6ZXIuYmVnaW4gPSBmdW5jdGlvbihvbkZhaWwpIHtcbiAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2h0dHBzOicgJiYgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICE9PSAnbG9jYWxob3N0JyAmJiB3aW5kb3cuY2hyb21lKXtcbiAgICBhbGVydChcIldlYkdhemVyIHdvcmtzIG9ubHkgb3ZlciBodHRwcy4gSWYgeW91IGFyZSBkb2luZyBsb2NhbCBkZXZlbG9wbWVudCwgeW91IG5lZWQgdG8gcnVuIGEgbG9jYWwgc2VydmVyLlwiKTtcbiAgfVxuXG4gIC8vIExvYWQgbW9kZWwgZGF0YSBzdG9yZWQgaW4gbG9jYWxmb3JhZ2UuXG4gIGlmICh3ZWJnYXplci5wYXJhbXMuc2F2ZURhdGFBY3Jvc3NTZXNzaW9ucykge1xuICAgIGxvYWRHbG9iYWxEYXRhKCk7XG4gIH1cblxuICBvbkZhaWwgPSBvbkZhaWwgfHwgZnVuY3Rpb24oKSB7Y29uc29sZS5sb2coJ05vIHN0cmVhbScpfTtcblxuICBpZiAoZGVidWdWaWRlb0xvYykge1xuICAgIGluaXQoZGVidWdWaWRlb0xvYyk7XG4gICAgcmV0dXJuIHdlYmdhemVyO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU0VUVVAgVklERU8gRUxFTUVOVFNcbiAgLy8gU2V0cyAubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSBkZXBlbmRpbmcgb24gYnJvd3NlclxuICBzZXRVc2VyTWVkaWFWYXJpYWJsZSgpO1xuXG4gIC8vIFJlcXVlc3Qgd2ViY2FtIGFjY2VzcyB1bmRlciBzcGVjaWZpYyBjb25zdHJhaW50c1xuICAvLyBXQUlUIGZvciBhY2Nlc3NcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgc3RyZWFtO1xuICAgIHRyeSB7XG4gICAgICBzdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSggd2ViZ2F6ZXIucGFyYW1zLmNhbUNvbnN0cmFpbnRzICk7XG4gICAgICBhd2FpdCBpbml0KHN0cmVhbSk7XG4gICAgICByZXNvbHZlKHdlYmdhemVyKTtcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgb25GYWlsKCk7XG4gICAgICB2aWRlb0VsZW1lbnQgPSBudWxsO1xuICAgICAgc3RyZWFtID0gbnVsbDtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cbi8qKlxuICogQ2hlY2tzIGlmIHdlYmdhemVyIGhhcyBmaW5pc2hlZCBpbml0aWFsaXppbmcgYWZ0ZXIgY2FsbGluZyBiZWdpbigpXG4gKiBbMjAxODA3MjkgSlRdIFRoaXMgc2VlbXMgbGlrZSBhIGJhZCBpZGVhIGZvciBob3cgdGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgaW1wbGVtZW50ZWQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gaWYgd2ViZ2F6ZXIgaXMgcmVhZHlcbiAqL1xud2ViZ2F6ZXIuaXNSZWFkeSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodmlkZW9FbGVtZW50Q2FudmFzID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB2aWRlb0VsZW1lbnRDYW52YXMud2lkdGggPiAwO1xufTtcblxuLyoqXG4gKiBTdG9wcyBjb2xsZWN0aW9uIG9mIGRhdGEgYW5kIHByZWRpY3Rpb25zXG4gKiBAcmV0dXJucyB7d2ViZ2F6ZXJ9IHRoaXNcbiAqL1xud2ViZ2F6ZXIucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgcGF1c2VkID0gdHJ1ZTtcbiAgcmV0dXJuIHdlYmdhemVyO1xufTtcblxuLyoqXG4gKiBSZXN1bWVzIGNvbGxlY3Rpb24gb2YgZGF0YSBhbmQgcHJlZGljdGlvbnMgaWYgcGF1c2VkXG4gKiBAcmV0dXJucyB7d2ViZ2F6ZXJ9IHRoaXNcbiAqL1xud2ViZ2F6ZXIucmVzdW1lID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGlmICghcGF1c2VkKSB7XG4gICAgcmV0dXJuIHdlYmdhemVyO1xuICB9XG4gIHBhdXNlZCA9IGZhbHNlO1xuICBhd2FpdCBsb29wKCk7XG4gIHJldHVybiB3ZWJnYXplcjtcbn07XG5cbi8qKlxuICogc3RvcHMgY29sbGVjdGlvbiBvZiBkYXRhIGFuZCByZW1vdmVzIGRvbSBtb2RpZmljYXRpb25zLCBtdXN0IGNhbGwgYmVnaW4oKSB0byByZXNldCB1cFxuICogQHJldHVybiB7d2ViZ2F6ZXJ9IHRoaXNcbiAqL1xud2ViZ2F6ZXIuZW5kID0gZnVuY3Rpb24oKSB7XG4gIC8vbG9vcCBtYXkgcnVuIGFuIGV4dHJhIHRpbWUgYW5kIGZhaWwgZHVlIHRvIHJlbW92ZWQgZWxlbWVudHNcbiAgcGF1c2VkID0gdHJ1ZTtcblxuICAvL3dlYmdhemVyLnN0b3BWaWRlbygpOyAvLyB1bmNvbW1lbnQgaWYgeW91IHdhbnQgdG8gc3RvcCB0aGUgdmlkZW8gZnJvbSBzdHJlYW1pbmdcblxuICAvL3JlbW92ZSB2aWRlbyBlbGVtZW50IGFuZCBjYW52YXNcbiAgdmlkZW9Db250YWluZXJFbGVtZW50LnJlbW92ZSgpO1xuICBnYXplRG90LnJlbW92ZSgpO1xuXG4gIHJldHVybiB3ZWJnYXplcjtcbn07XG5cbi8qKlxuICogU3RvcHMgdGhlIHZpZGVvIGNhbWVyYSBmcm9tIHN0cmVhbWluZyBhbmQgcmVtb3ZlcyB0aGUgdmlkZW8gb3V0bGluZXNcbiAqIEByZXR1cm4ge3dlYmdhemVyfSB0aGlzXG4gKi9cbndlYmdhemVyLnN0b3BWaWRlbyA9IGZ1bmN0aW9uKCkge1xuICAvLyBTdG9wcyB0aGUgdmlkZW8gZnJvbSBzdHJlYW1pbmdcbiAgdmlkZW9TdHJlYW0uZ2V0VHJhY2tzKClbMF0uc3RvcCgpO1xuXG4gIC8vIFJlbW92ZXMgdGhlIG91dGxpbmUgb2YgdGhlIGZhY2VcbiAgdmlkZW9Db250YWluZXJFbGVtZW50LnJlbW92ZUNoaWxkKCBmYWNlT3ZlcmxheSApO1xuXG4gIC8vIFJlbW92ZXMgdGhlIGJveCBhcm91bmQgdGhlIGZhY2VcbiAgdmlkZW9Db250YWluZXJFbGVtZW50LnJlbW92ZUNoaWxkKCBmYWNlRmVlZGJhY2tCb3ggKTtcblxuICByZXR1cm4gd2ViZ2F6ZXI7XG59XG5cblxuLy9QVUJMSUMgRlVOQ1RJT05TIC0gREVCVUdcblxuLyoqXG4gKiBSZXR1cm5zIGlmIHRoZSBicm93c2VyIGlzIGNvbXBhdGlibGUgd2l0aCB3ZWJnYXplclxuICogQHJldHVybiB7Ym9vbGVhbn0gaWYgYnJvd3NlciBpcyBjb21wYXRpYmxlXG4gKi9cbndlYmdhemVyLmRldGVjdENvbXBhdGliaWxpdHkgPSBmdW5jdGlvbigpIHtcblxuICB2YXIgZ2V0VXNlck1lZGlhID0gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgfHxcbiAgICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhIHx8XG4gICAgbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSB8fFxuICAgIG5hdmlnYXRvci5tb3pHZXRVc2VyTWVkaWE7XG5cbiAgcmV0dXJuIGdldFVzZXJNZWRpYSAhPT0gdW5kZWZpbmVkO1xufTtcblxuLyoqXG4gKiBTZXQgd2hldGhlciB0byBzaG93IGFueSBvZiB0aGUgdmlkZW8gcHJldmlld3MgKGNhbWVyYSwgZmFjZSBvdmVybGF5LCBmZWVkYmFjayBib3gpLlxuICogSWYgdHJ1ZTogdmlzaWJpbGl0eSBkZXBlbmRzIG9uIGNvcnJlc3BvbmRpbmcgcGFyYW1zIChkZWZhdWx0IGFsbCB0cnVlKS5cbiAqIElmIGZhbHNlOiBjYW1lcmEsIGZhY2Ugb3ZlcmxheSwgZmVlZGJhY2sgYm94IGFyZSBhbGwgaGlkZGVuXG4gKiBAcGFyYW0ge2Jvb2x9IHZhbFxuICogQHJldHVybiB7d2ViZ2F6ZXJ9IHRoaXNcbiAqL1xud2ViZ2F6ZXIuc2hvd1ZpZGVvUHJldmlldyA9IGZ1bmN0aW9uKHZhbCkge1xuICB3ZWJnYXplci5wYXJhbXMuc2hvd1ZpZGVvUHJldmlldyA9IHZhbDtcbiAgd2ViZ2F6ZXIuc2hvd1ZpZGVvKHZhbCAmJiB3ZWJnYXplci5wYXJhbXMuc2hvd1ZpZGVvKTtcbiAgd2ViZ2F6ZXIuc2hvd0ZhY2VPdmVybGF5KHZhbCAmJiB3ZWJnYXplci5wYXJhbXMuc2hvd0ZhY2VPdmVybGF5KTtcbiAgd2ViZ2F6ZXIuc2hvd0ZhY2VGZWVkYmFja0JveCh2YWwgJiYgd2ViZ2F6ZXIucGFyYW1zLnNob3dGYWNlRmVlZGJhY2tCb3gpO1xuICByZXR1cm4gd2ViZ2F6ZXI7XG59XG5cbi8qKlxuICogaGlkZXMgYSB2aWRlbyBlbGVtZW50ICh2aWRlb0VsZW1lbnQgb3IgdmlkZW9Db250YWluZXJFbGVtZW50KVxuICogdXNlcyBkaXNwbGF5ID0gJ25vbmUnIGZvciBhbGwgYnJvd3NlcnMgZXhjZXB0IFNhZmFyaSwgd2hpY2ggdXNlcyBvcGFjaXR5ID0gJzEnXG4gKiBiZWNhdXNlIFNhZmFyaSBvcHRpbWl6ZXMgb3V0IHZpZGVvIGVsZW1lbnQgaWYgZGlzcGxheSA9ICdub25lJ1xuICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnRcbiAqIEByZXR1cm4ge251bGx9XG4gKi9cbmZ1bmN0aW9uIGhpZGVWaWRlb0VsZW1lbnQodmFsKSB7XG4gIGlmIChuYXZpZ2F0b3IudmVuZG9yICYmIG5hdmlnYXRvci52ZW5kb3IuaW5kZXhPZignQXBwbGUnKSA+IC0xKSB7XG4gICAgdmFsLnN0eWxlLm9wYWNpdHkgPSB3ZWJnYXplci5wYXJhbXMuc2hvd1ZpZGVvID8gJzEnOiAnMCc7XG4gICAgdmFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICB9IGVsc2Uge1xuICAgIHZhbC5zdHlsZS5kaXNwbGF5ID0gd2ViZ2F6ZXIucGFyYW1zLnNob3dWaWRlbyA/ICdibG9jaycgOiAnbm9uZSc7XG4gIH1cbn1cblxuLyoqXG4gKiBTZXQgd2hldGhlciB0aGUgY2FtZXJhIHZpZGVvIHByZXZpZXcgaXMgdmlzaWJsZSBvciBub3QgKGRlZmF1bHQgdHJ1ZSkuXG4gKiBAcGFyYW0geyp9IGJvb2xcbiAqIEByZXR1cm4ge3dlYmdhemVyfSB0aGlzXG4gKi9cbndlYmdhemVyLnNob3dWaWRlbyA9IGZ1bmN0aW9uKHZhbCkge1xuICB3ZWJnYXplci5wYXJhbXMuc2hvd1ZpZGVvID0gdmFsO1xuICBpZiAodmlkZW9FbGVtZW50KSB7XG4gICAgaGlkZVZpZGVvRWxlbWVudCh2aWRlb0VsZW1lbnQpO1xuICB9XG4gIGlmICh2aWRlb0NvbnRhaW5lckVsZW1lbnQpIHtcbiAgICBoaWRlVmlkZW9FbGVtZW50KHZpZGVvQ29udGFpbmVyRWxlbWVudCk7XG4gIH1cbiAgcmV0dXJuIHdlYmdhemVyO1xufTtcblxuLyoqXG4gKiBTZXQgd2hldGhlciB0aGUgZmFjZSBvdmVybGF5IGlzIHZpc2libGUgb3Igbm90IChkZWZhdWx0IHRydWUpLlxuICogQHBhcmFtIHsqfSBib29sXG4gKiBAcmV0dXJuIHt3ZWJnYXplcn0gdGhpc1xuICovXG53ZWJnYXplci5zaG93RmFjZU92ZXJsYXkgPSBmdW5jdGlvbih2YWwpIHtcbiAgd2ViZ2F6ZXIucGFyYW1zLnNob3dGYWNlT3ZlcmxheSA9IHZhbDtcbiAgaWYoIGZhY2VPdmVybGF5ICkge1xuICAgIGZhY2VPdmVybGF5LnN0eWxlLmRpc3BsYXkgPSB2YWwgPyAnYmxvY2snIDogJ25vbmUnO1xuICB9XG4gIHJldHVybiB3ZWJnYXplcjtcbn07XG5cbi8qKlxuICogU2V0IHdoZXRoZXIgdGhlIGZhY2UgZmVlZGJhY2sgYm94IGlzIHZpc2libGUgb3Igbm90IChkZWZhdWx0IHRydWUpLlxuICogQHBhcmFtIHsqfSBib29sXG4gKiBAcmV0dXJuIHt3ZWJnYXplcn0gdGhpc1xuICovXG53ZWJnYXplci5zaG93RmFjZUZlZWRiYWNrQm94ID0gZnVuY3Rpb24odmFsKSB7XG5cbiAgd2ViZ2F6ZXIucGFyYW1zLnNob3dGYWNlRmVlZGJhY2tCb3ggPSB2YWw7XG4gIGlmKCBmYWNlRmVlZGJhY2tCb3ggKSB7XG4gICAgZmFjZUZlZWRiYWNrQm94LnN0eWxlLmRpc3BsYXkgPSB2YWwgPyAnYmxvY2snIDogJ25vbmUnO1xuICB9XG4gIHJldHVybiB3ZWJnYXplcjtcbn07XG5cbi8qKlxuICogU2V0IHdoZXRoZXIgdGhlIGdhemUgcHJlZGljdGlvbiBwb2ludChzKSBhcmUgdmlzaWJsZSBvciBub3QuXG4gKiBNdWx0aXBsZSBiZWNhdXNlIG9mIGEgdHJhaWwgb2YgcGFzdCBkb3RzLiBEZWZhdWx0IHRydWVcbiAqIEByZXR1cm4ge3dlYmdhemVyfSB0aGlzXG4gKi9cbndlYmdhemVyLnNob3dQcmVkaWN0aW9uUG9pbnRzID0gZnVuY3Rpb24odmFsKSB7XG4gIHdlYmdhemVyLnBhcmFtcy5zaG93R2F6ZURvdCA9IHZhbDtcbiAgaWYoIGdhemVEb3QgKSB7XG4gICAgZ2F6ZURvdC5zdHlsZS5kaXNwbGF5ID0gdmFsID8gJ2Jsb2NrJyA6ICdub25lJztcbiAgfVxuICByZXR1cm4gd2ViZ2F6ZXI7XG59O1xuXG4vKipcbiAqIFNldCB3aGV0aGVyIHByZXZpb3VzIGNhbGlicmF0aW9uIGRhdGEgKGZyb20gbG9jYWxmb3JhZ2UpIHNob3VsZCBiZSBsb2FkZWQuXG4gKiBEZWZhdWx0IHRydWUuXG4gKlxuICogTk9URTogU2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgd2ViZ2F6ZXIuYmVnaW4oKSAtLSBzZWUgd3d3L2pzL21haW4uanMgZm9yIGV4YW1wbGVcbiAqXG4gKiBAcGFyYW0gdmFsXG4gKiBAcmV0dXJucyB7d2ViZ2F6ZXJ9IHRoaXNcbiAqL1xud2ViZ2F6ZXIuc2F2ZURhdGFBY3Jvc3NTZXNzaW9ucyA9IGZ1bmN0aW9uKHZhbCkge1xuICB3ZWJnYXplci5wYXJhbXMuc2F2ZURhdGFBY3Jvc3NTZXNzaW9ucyA9IHZhbDtcbiAgcmV0dXJuIHdlYmdhemVyO1xufVxuXG4vKipcbiAqIFNldCB3aGV0aGVyIGEgS2FsbWFuIGZpbHRlciB3aWxsIGJlIGFwcGxpZWQgdG8gZ2F6ZSBwcmVkaWN0aW9ucyAoZGVmYXVsdCB0cnVlKTtcbiAqIEByZXR1cm4ge3dlYmdhemVyfSB0aGlzXG4gKi9cbndlYmdhemVyLmFwcGx5S2FsbWFuRmlsdGVyID0gZnVuY3Rpb24odmFsKSB7XG4gIHdlYmdhemVyLnBhcmFtcy5hcHBseUthbG1hbkZpbHRlciA9IHZhbDtcbiAgcmV0dXJuIHdlYmdhemVyO1xufVxuXG4vKipcbiAqIERlZmluZSBjb25zdHJhaW50cyBvbiB0aGUgdmlkZW8gY2FtZXJhIHRoYXQgaXMgdXNlZC4gVXNlZnVsIGZvciBub24tc3RhbmRhcmQgc2V0dXBzLlxuICogVGhpcyBjYW4gYmUgc2V0IGJlZm9yZSBjYWxsaW5nIHdlYmdhemVyLmJlZ2luKCksIGJ1dCBhbHNvIG1pZCBzdHJlYW0uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbnN0cmFpbnRzIEV4YW1wbGUgY29uc3RyYWludHMgb2JqZWN0OlxuICogeyB3aWR0aDogeyBtaW46IDMyMCwgaWRlYWw6IDEyODAsIG1heDogMTkyMCB9LCBoZWlnaHQ6IHsgbWluOiAyNDAsIGlkZWFsOiA3MjAsIG1heDogMTA4MCB9LCBmYWNpbmdNb2RlOiBcInVzZXJcIiB9O1xuICpcbiAqIEZvbGxvd3MgZGVmaW5pdGlvbiBoZXJlOlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01lZGlhX1N0cmVhbXNfQVBJL0NvbnN0cmFpbnRzXG4gKlxuICogTm90ZTogVGhlIGNvbnN0cmFpbnRzIHNldCBoZXJlIGFyZSBhcHBsaWVkIHRvIHRoZSB2aWRlbyB0cmFjayBvbmx5LiBUaGV5IGFsc28gX3JlcGxhY2VfIGFueSBjb25zdHJhaW50cywgc28gYmUgc3VyZSB0byBzZXQgZXZlcnl0aGluZyB5b3UgbmVlZC5cbiAqIFdhcm5pbmc6IFNldHRpbmcgYSBsYXJnZSB2aWRlbyByZXNvbHV0aW9uIHdpbGwgZGVjcmVhc2UgcGVyZm9ybWFuY2UsIGFuZCBtYXkgcmVxdWlyZVxuICovXG53ZWJnYXplci5zZXRDYW1lcmFDb25zdHJhaW50cyA9IGFzeW5jIGZ1bmN0aW9uKGNvbnN0cmFpbnRzKSB7XG4gIHZhciB2aWRlb1RyYWNrLHZpZGVvU2V0dGluZ3M7XG4gIHdlYmdhemVyLnBhcmFtcy5jYW1Db25zdHJhaW50cyA9IGNvbnN0cmFpbnRzO1xuXG4gIC8vIElmIHRoZSBjYW1lcmEgc3RyZWFtIGlzIGFscmVhZHkgdXAuLi5cbiAgaWYodmlkZW9TdHJlYW0pXG4gIHtcbiAgICB3ZWJnYXplci5wYXVzZSgpO1xuICAgIHZpZGVvVHJhY2sgPSB2aWRlb1N0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB2aWRlb1RyYWNrLmFwcGx5Q29uc3RyYWludHMoIHdlYmdhemVyLnBhcmFtcy5jYW1Db25zdHJhaW50cyApO1xuICAgICAgdmlkZW9TZXR0aW5ncyA9IHZpZGVvVHJhY2suZ2V0U2V0dGluZ3MoKTtcbiAgICAgIHNldEludGVybmFsVmlkZW9CdWZmZXJTaXplcyggdmlkZW9TZXR0aW5ncy53aWR0aCwgdmlkZW9TZXR0aW5ncy5oZWlnaHQgKTtcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgY29uc29sZS5sb2coIGVyciApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZXNldCBhbmQgcmVjb21wdXRlIHNpemVzIG9mIHRoZSB2aWRlbyB2aWV3ZXIuXG4gICAgLy8gVGhpcyBpcyBvbmx5IHRvIGFkanVzdCB0aGUgZmVlZGJhY2sgYm94LCBzYXksIGlmIHRoZSBhc3BlY3QgcmF0aW8gb2YgdGhlIHZpZGVvIGhhcyBjaGFuZ2VkLlxuICAgIHdlYmdhemVyLnNldFZpZGVvVmlld2VyU2l6ZSggd2ViZ2F6ZXIucGFyYW1zLnZpZGVvVmlld2VyV2lkdGgsIHdlYmdhemVyLnBhcmFtcy52aWRlb1ZpZXdlckhlaWdodCApXG4gICAgd2ViZ2F6ZXIuZ2V0VHJhY2tlcigpLnJlc2V0KCk7XG4gICAgYXdhaXQgd2ViZ2F6ZXIucmVzdW1lKCk7XG4gIH1cbn1cblxuXG4vKipcbiAqIERvZXMgd2hhdCBpdCBzYXlzIG9uIHRoZSB0aW4uXG4gKiBAcGFyYW0geyp9IHdpZHRoXG4gKiBAcGFyYW0geyp9IGhlaWdodFxuICovXG5mdW5jdGlvbiBzZXRJbnRlcm5hbFZpZGVvQnVmZmVyU2l6ZXMoIHdpZHRoLCBoZWlnaHQgKSB7XG4gIC8vIFJlLXNldCB0aGUgY2FudmFzIHNpemUgdXNlZCBieSB0aGUgaW50ZXJuYWwgcHJvY2Vzc2VzXG4gIGlmKCB2aWRlb0VsZW1lbnRDYW52YXMgKVxuICB7XG4gICAgdmlkZW9FbGVtZW50Q2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgdmlkZW9FbGVtZW50Q2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgfVxuXG4gIC8vIFJlLXNldCB0aGUgZmFjZSBvdmVybGF5IGNhbnZhcyBzaXplXG4gIGlmKCBmYWNlT3ZlcmxheSApXG4gIHtcbiAgICBmYWNlT3ZlcmxheS53aWR0aCA9IHdpZHRoO1xuICAgIGZhY2VPdmVybGF5LmhlaWdodCA9IGhlaWdodDtcbiAgfVxufVxuXG4vKipcbiAqICBTZXQgYSBzdGF0aWMgdmlkZW8gZmlsZSB0byBiZSB1c2VkIGluc3RlYWQgb2Ygd2ViY2FtIHZpZGVvXG4gKiAgQHBhcmFtIHtTdHJpbmd9IHZpZGVvTG9jIC0gdmlkZW8gZmlsZSBsb2NhdGlvblxuICogIEByZXR1cm4ge3dlYmdhemVyfSB0aGlzXG4gKi9cbndlYmdhemVyLnNldFN0YXRpY1ZpZGVvID0gZnVuY3Rpb24odmlkZW9Mb2MpIHtcbiAgZGVidWdWaWRlb0xvYyA9IHZpZGVvTG9jO1xuICByZXR1cm4gd2ViZ2F6ZXI7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgc2l6ZSBvZiB0aGUgdmlkZW8gdmlld2VyXG4gKi9cbndlYmdhemVyLnNldFZpZGVvVmlld2VyU2l6ZSA9IGZ1bmN0aW9uKHcsIGgpIHtcblxuICB3ZWJnYXplci5wYXJhbXMudmlkZW9WaWV3ZXJXaWR0aCA9IHc7XG4gIHdlYmdhemVyLnBhcmFtcy52aWRlb1ZpZXdlckhlaWdodCA9IGg7XG5cbiAgLy8gQ2hhbmdlIHRoZSB2aWRlbyB2aWV3ZXJcbiAgdmlkZW9FbGVtZW50LnN0eWxlLndpZHRoID0gdyArICdweCc7XG4gIHZpZGVvRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JztcblxuICAvLyBDaGFuZ2UgdmlkZW8gY29udGFpbmVyXG4gIHZpZGVvQ29udGFpbmVyRWxlbWVudC5zdHlsZS53aWR0aCA9IHcgKyAncHgnO1xuICB2aWRlb0NvbnRhaW5lckVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gaCArICdweCc7XG5cbiAgLy8gQ2hhbmdlIHRoZSBmYWNlIG92ZXJsYXlcbiAgZmFjZU92ZXJsYXkuc3R5bGUud2lkdGggPSB3ICsgJ3B4JztcbiAgZmFjZU92ZXJsYXkuc3R5bGUuaGVpZ2h0ID0gaCArICdweCc7XG5cbiAgLy8gQ2hhbmdlIHRoZSBmZWVkYmFjayBib3ggc2l6ZVxuICAvLyBDb21wdXRlIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBmYWNlIG92ZXJsYXkgdmFsaWRhdGlvbiBib3ggYmFzZWQgb24gdGhlIHZpZGVvIHNpemVcbiAgdmFyIHRsd2ggPSB3ZWJnYXplci5jb21wdXRlVmFsaWRhdGlvbkJveFNpemUoKVxuICAvLyBBc3NpZ24gdGhlbSB0byB0aGUgb2JqZWN0XG4gIGZhY2VGZWVkYmFja0JveC5zdHlsZS50b3AgPSB0bHdoWzBdICsgJ3B4JztcbiAgZmFjZUZlZWRiYWNrQm94LnN0eWxlLmxlZnQgPSB0bHdoWzFdICsgJ3B4JztcbiAgZmFjZUZlZWRiYWNrQm94LnN0eWxlLndpZHRoID0gdGx3aFsyXSArICdweCc7XG4gIGZhY2VGZWVkYmFja0JveC5zdHlsZS5oZWlnaHQgPSB0bHdoWzNdICsgJ3B4Jztcbn07XG5cbi8qKlxuICogIEFkZCB0aGUgbW91c2UgY2xpY2sgYW5kIG1vdmUgbGlzdGVuZXJzIHRoYXQgYWRkIHRyYWluaW5nIGRhdGEuXG4gKiAgQHJldHVybiB7d2ViZ2F6ZXJ9IHRoaXNcbiAqL1xud2ViZ2F6ZXIuYWRkTW91c2VFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uKCkge1xuICBhZGRNb3VzZUV2ZW50TGlzdGVuZXJzKCk7XG4gIHJldHVybiB3ZWJnYXplcjtcbn07XG5cbi8qKlxuICogIFJlbW92ZSB0aGUgbW91c2UgY2xpY2sgYW5kIG1vdmUgbGlzdGVuZXJzIHRoYXQgYWRkIHRyYWluaW5nIGRhdGEuXG4gKiAgQHJldHVybiB7d2ViZ2F6ZXJ9IHRoaXNcbiAqL1xud2ViZ2F6ZXIucmVtb3ZlTW91c2VFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uKCkge1xuICByZW1vdmVNb3VzZUV2ZW50TGlzdGVuZXJzKCk7XG4gIHJldHVybiB3ZWJnYXplcjtcbn07XG5cbi8qKlxuICogIFJlY29yZHMgY3VycmVudCBzY3JlZW4gcG9zaXRpb24gZm9yIGN1cnJlbnQgcHVwaWwgZmVhdHVyZXMuXG4gKiAgQHBhcmFtIHtTdHJpbmd9IHggLSBwb3NpdGlvbiBvbiBzY3JlZW4gaW4gdGhlIHggYXhpc1xuICogIEBwYXJhbSB7U3RyaW5nfSB5IC0gcG9zaXRpb24gb24gc2NyZWVuIGluIHRoZSB5IGF4aXNcbiAqICBAcGFyYW0ge1N0cmluZ30gZXZlbnRUeXBlIC0gXCJjbGlja1wiIG9yIFwibW92ZVwiLCBhcyBwZXIgZXZlbnRUeXBlc1xuICogIEByZXR1cm4ge3dlYmdhemVyfSB0aGlzXG4gKi9cbndlYmdhemVyLnJlY29yZFNjcmVlblBvc2l0aW9uID0gZnVuY3Rpb24oeCwgeSwgZXZlbnRUeXBlKSB7XG4gIC8vIGdpdmUgdGhpcyB0aGUgc2FtZSB3ZWlnaHQgdGhhdCBhIGNsaWNrIGdldHMuXG4gIHJlY29yZFNjcmVlblBvc2l0aW9uKHgsIHksIGV2ZW50VHlwZSB8fCBldmVudFR5cGVzWzBdKTtcbiAgcmV0dXJuIHdlYmdhemVyO1xufTtcblxuLypcbiAqIFN0b3JlcyB0aGUgcG9zaXRpb24gb2YgdGhlIGZpZnR5IG1vc3QgcmVjZW50IHRyYWNrZXIgcHJlZGl0aW9uc1xuICovXG53ZWJnYXplci5zdG9yZVBvaW50cyA9IGZ1bmN0aW9uKHgsIHksIGspIHtcbiAgeFBhc3Q1MFtrXSA9IHg7XG4gIHlQYXN0NTBba10gPSB5O1xufVxuXG4vL1NFVFRFUlNcbi8qKlxuICogU2V0cyB0aGUgdHJhY2tpbmcgbW9kdWxlXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB0cmFja2luZyBtb2R1bGUgdG8gdXNlXG4gKiBAcmV0dXJuIHt3ZWJnYXplcn0gdGhpc1xuICovXG53ZWJnYXplci5zZXRUcmFja2VyID0gZnVuY3Rpb24obmFtZSkge1xuICBpZiAoY3VyVHJhY2tlck1hcFtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS5sb2coJ0ludmFsaWQgdHJhY2tlciBzZWxlY3Rpb24nKTtcbiAgICBjb25zb2xlLmxvZygnT3B0aW9ucyBhcmU6ICcpO1xuICAgIGZvciAodmFyIHQgaW4gY3VyVHJhY2tlck1hcCkge1xuICAgICAgY29uc29sZS5sb2codCk7XG4gICAgfVxuICAgIHJldHVybiB3ZWJnYXplcjtcbiAgfVxuICBjdXJUcmFja2VyID0gY3VyVHJhY2tlck1hcFtuYW1lXSgpO1xuICByZXR1cm4gd2ViZ2F6ZXI7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlZ3Jlc3Npb24gbW9kdWxlIGFuZCBjbGVhcnMgYW55IG90aGVyIHJlZ3Jlc3Npb24gbW9kdWxlc1xuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcmVncmVzc2lvbiBtb2R1bGUgdG8gdXNlXG4gKiBAcmV0dXJuIHt3ZWJnYXplcn0gdGhpc1xuICovXG53ZWJnYXplci5zZXRSZWdyZXNzaW9uID0gZnVuY3Rpb24obmFtZSkge1xuICBpZiAocmVncmVzc2lvbk1hcFtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS5sb2coJ0ludmFsaWQgcmVncmVzc2lvbiBzZWxlY3Rpb24nKTtcbiAgICBjb25zb2xlLmxvZygnT3B0aW9ucyBhcmU6ICcpO1xuICAgIGZvciAodmFyIHJlZyBpbiByZWdyZXNzaW9uTWFwKSB7XG4gICAgICBjb25zb2xlLmxvZyhyZWcpO1xuICAgIH1cbiAgICByZXR1cm4gd2ViZ2F6ZXI7XG4gIH1cbiAgZGF0YSA9IHJlZ3NbMF0uZ2V0RGF0YSgpO1xuICByZWdzID0gW3JlZ3Jlc3Npb25NYXBbbmFtZV0oKV07XG4gIHJlZ3NbMF0uc2V0RGF0YShkYXRhKTtcbiAgcmV0dXJuIHdlYmdhemVyO1xufTtcblxuLyoqXG4gKiBBZGRzIGEgbmV3IHRyYWNrZXIgbW9kdWxlIHNvIHRoYXQgaXQgY2FuIGJlIHVzZWQgYnkgc2V0VHJhY2tlcigpXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBuZXcgbmFtZSBvZiB0aGUgdHJhY2tlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgLSB0aGUgY29uc3RydWN0b3Igb2YgdGhlIGN1clRyYWNrZXIgb2JqZWN0XG4gKiBAcmV0dXJuIHt3ZWJnYXplcn0gdGhpc1xuICovXG53ZWJnYXplci5hZGRUcmFja2VyTW9kdWxlID0gZnVuY3Rpb24obmFtZSwgY29uc3RydWN0b3IpIHtcbiAgY3VyVHJhY2tlck1hcFtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgY29uc3RydWN0b3IoKTtcbiAgfTtcbn07XG5cbi8qKlxuICogQWRkcyBhIG5ldyByZWdyZXNzaW9uIG1vZHVsZSBzbyB0aGF0IGl0IGNhbiBiZSB1c2VkIGJ5IHNldFJlZ3Jlc3Npb24oKSBhbmQgYWRkUmVncmVzc2lvbigpXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBuZXcgbmFtZSBvZiB0aGUgcmVncmVzc2lvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgLSB0aGUgY29uc3RydWN0b3Igb2YgdGhlIHJlZ3Jlc3Npb24gb2JqZWN0XG4gKi9cbndlYmdhemVyLmFkZFJlZ3Jlc3Npb25Nb2R1bGUgPSBmdW5jdGlvbihuYW1lLCBjb25zdHJ1Y3Rvcikge1xuICByZWdyZXNzaW9uTWFwW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBjb25zdHJ1Y3RvcigpO1xuICB9O1xufTtcblxuLyoqXG4gKiBBZGRzIGEgbmV3IHJlZ3Jlc3Npb24gbW9kdWxlIHRvIHRoZSBsaXN0IG9mIHJlZ3Jlc3Npb24gbW9kdWxlcywgc2VlZGluZyBpdHMgZGF0YSBmcm9tIHRoZSBmaXJzdCByZWdyZXNzaW9uIG1vZHVsZVxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSB0aGUgc3RyaW5nIG5hbWUgb2YgdGhlIHJlZ3Jlc3Npb24gbW9kdWxlIHRvIGFkZFxuICogQHJldHVybiB7d2ViZ2F6ZXJ9IHRoaXNcbiAqL1xud2ViZ2F6ZXIuYWRkUmVncmVzc2lvbiA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIG5ld1JlZyA9IHJlZ3Jlc3Npb25NYXBbbmFtZV0oKTtcbiAgZGF0YSA9IHJlZ3NbMF0uZ2V0RGF0YSgpO1xuICBuZXdSZWcuc2V0RGF0YShkYXRhKTtcbiAgcmVncy5wdXNoKG5ld1JlZyk7XG4gIHJldHVybiB3ZWJnYXplcjtcbn07XG5cbi8qKlxuICogU2V0cyBhIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIG9uIGV2ZXJ5IGdhemUgZXZlbnQgKGN1cnJlbnRseSBhbGwgdGltZSBzdGVwcylcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgKGl0IG11c3QgYmUgbGlrZSBmdW5jdGlvbihkYXRhLCBlbGFwc2VkVGltZSkpXG4gKiBAcmV0dXJuIHt3ZWJnYXplcn0gdGhpc1xuICovXG53ZWJnYXplci5zZXRHYXplTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikge1xuICBjYWxsYmFjayA9IGxpc3RlbmVyO1xuICByZXR1cm4gd2ViZ2F6ZXI7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGNhbGxiYWNrIHNldCBieSBzZXRHYXplTGlzdGVuZXJcbiAqIEByZXR1cm4ge3dlYmdhemVyfSB0aGlzXG4gKi9cbndlYmdhemVyLmNsZWFyR2F6ZUxpc3RlbmVyID0gZnVuY3Rpb24oKSB7XG4gIGNhbGxiYWNrID0gbm9wQ2FsbGJhY2s7XG4gIHJldHVybiB3ZWJnYXplcjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSB2aWRlbyBlbGVtZW50IGNhbnZhczsgdXNlZnVsIGlmIHlvdSB3YW50IHRvIHJ1biBXZWJHYXplciBvbiB5b3VyIG93biBjYW52YXMgKGUuZy4sIG9uIGFueSByYW5kb20gaW1hZ2UpLlxuICogQHJldHVybiBUaGUgY3VycmVudCB2aWRlbyBlbGVtZW50IGNhbnZhc1xuICovXG53ZWJnYXplci5zZXRWaWRlb0VsZW1lbnRDYW52YXMgPSBmdW5jdGlvbihjYW52YXMpIHtcbiAgdmlkZW9FbGVtZW50Q2FudmFzID0gY2FudmFzO1xuICByZXR1cm4gdmlkZW9FbGVtZW50Q2FudmFzO1xufVxuXG4vKipcbiAqIENsZWFyIGRhdGEgZnJvbSBsb2NhbGZvcmFnZSBhbmQgZnJvbSByZWdzXG4gKi9cbndlYmdhemVyLmNsZWFyRGF0YSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBjbGVhckRhdGEoKTtcbn1cblxuXG4vL0dFVFRFUlNcbi8qKlxuICogUmV0dXJucyB0aGUgdHJhY2tlciBjdXJyZW50bHkgaW4gdXNlXG4gKiBAcmV0dXJuIHt0cmFja2VyfSBhbiBvYmplY3QgZm9sbG93aW5nIHRoZSB0cmFja2VyIGludGVyZmFjZVxuICovXG53ZWJnYXplci5nZXRUcmFja2VyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjdXJUcmFja2VyO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWdyZXNzaW9uIGN1cnJlbnRseSBpbiB1c2VcbiAqIEByZXR1cm4ge0FycmF5LjxPYmplY3Q+fSBhbiBhcnJheSBvZiByZWdyZXNzaW9uIG9iamVjdHMgZm9sbG93aW5nIHRoZSByZWdyZXNzaW9uIGludGVyZmFjZVxuICovXG53ZWJnYXplci5nZXRSZWdyZXNzaW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByZWdzO1xufTtcblxuLyoqXG4gKiBSZXF1ZXN0cyBhbiBpbW1lZGlhdGUgcHJlZGljdGlvblxuICogQHJldHVybiB7b2JqZWN0fSBwcmVkaWN0aW9uIGRhdGEgb2JqZWN0XG4gKi9cbndlYmdhemVyLmdldEN1cnJlbnRQcmVkaWN0aW9uID0gZnVuY3Rpb24ocmVnSW5kZXgpIHtcbiAgcmV0dXJuIGdldFByZWRpY3Rpb24ocmVnSW5kZXgpO1xufTtcblxuLyoqXG4gKiByZXR1cm5zIHRoZSBkaWZmZXJlbnQgZXZlbnQgdHlwZXMgdGhhdCBtYXkgYmUgcGFzc2VkIHRvIHJlZ3Jlc3Npb25zIHdoZW4gY2FsbGluZyByZWdyZXNzaW9uLmFkZERhdGEoKVxuICogQHJldHVybiB7QXJyYXl9IGFycmF5IG9mIHN0cmluZ3Mgd2hlcmUgZWFjaCBzdHJpbmcgaXMgYW4gZXZlbnQgdHlwZVxuICovXG53ZWJnYXplci5wYXJhbXMuZ2V0RXZlbnRUeXBlcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZXZlbnRUeXBlcy5zbGljZSgpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgdmlkZW8gZWxlbWVudCBjYW52YXMgdGhhdCBXZWJHYXplciB1c2VzIGludGVybmFsbHkgb24gd2hpY2ggdG8gcnVuIGl0cyBmYWNlIHRyYWNrZXIuXG4gKiBAcmV0dXJuIFRoZSBjdXJyZW50IHZpZGVvIGVsZW1lbnQgY2FudmFzXG4gKi9cbndlYmdhemVyLmdldFZpZGVvRWxlbWVudENhbnZhcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdmlkZW9FbGVtZW50Q2FudmFzO1xufVxuXG4vKipcbiAqIEByZXR1cm4gYXJyYXkgW2EsYl0gd2hlcmUgYSBpcyB3aWR0aCByYXRpbyBhbmQgYiBpcyBoZWlnaHQgcmF0aW9cbiAqL1xud2ViZ2F6ZXIuZ2V0VmlkZW9QcmV2aWV3VG9DYW1lcmFSZXNvbHV0aW9uUmF0aW8gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFt3ZWJnYXplci5wYXJhbXMudmlkZW9WaWV3ZXJXaWR0aCAvIHZpZGVvRWxlbWVudC52aWRlb1dpZHRoLCB3ZWJnYXplci5wYXJhbXMudmlkZW9WaWV3ZXJIZWlnaHQgLyB2aWRlb0VsZW1lbnQudmlkZW9IZWlnaHRdO1xufVxuXG4vKlxuICogR2V0cyB0aGUgZmlmdHkgbW9zdCByZWNlbnQgdHJhY2tlciBwcmVkaWN0aW9uc1xuICovXG53ZWJnYXplci5nZXRTdG9yZWRQb2ludHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFt4UGFzdDUwLCB5UGFzdDUwXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2ViZ2F6ZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/webgazer/src/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/webgazer/src/mat.mjs":
/*!*******************************************!*\
  !*** ./node_modules/webgazer/src/mat.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Matrix operations, mostly based on WEKA\n * @see https://github.com/Waikato/weka-3.8/blob/master/weka/src/main/java/weka/core/matrix/Matrix.java\n */\n\n/**\n * @callback operationCallback\n * @param {number} a - an element of matrix A\n * @param {number} b - an element of matrix B\n * @return {number} a ○ b\n */\n/**\n * Apply arithmetic operations to every element of A and B:\n * X = A ○ B, where ○ can be one of +, -, *, /, etc.\n *\n * @param {Array.<Array.<Number>>} A\n * @param {Array.<Array.<Number>>} B\n * @param {operationCallback} op - operation to apply, op(a, b) => a ○ b\n * @return {Array.<Array.<Number>>} A ○ B\n */\nfunction applyArithmeticOperation(A, B, op) {\n\n    if (A.length !== B.length || A[0].length !== B[0].length) {\n        throw new Error('Matrix dimensions must agree.');\n    }\n\n    const rows = A.length;\n    const cols = A[0].length;\n\n    const X = new Array(rows);\n\n    for (let i = 0; i < rows; i++) {\n        X[i] = new Array(cols);\n\n        for (let j = 0; j < cols; j++) {\n            X[i][j] = op(A[i][j], B[i][j]);\n        }\n    }\n\n    return X;\n}\n\nconst mat = {\n    /**\n     * Transposes an m*n array\n     * @param {Array.<Array.<Number>>} matrix - of 'M x N' dimensionality\n     * @return {Array.<Array.<Number>>} transposed matrix\n     */\n    transpose(matrix) {\n        const rows = matrix.length;\n        const cols = matrix[0].length;\n        const transposedMatrix = new Array(cols);\n\n        for (let j = 0; j < cols; j++) {\n            transposedMatrix[j] = new Array(rows);\n\n            for (let i = 0; i < rows; i++) {\n                transposedMatrix[j][i] = matrix[i][j];\n            }\n        }\n\n        return transposedMatrix;\n    },\n\n    /**\n     * Get a sub-matrix of matrix\n     * @param {Array.<Array.<Number>>} matrix - original matrix\n     * @param {Array.<Number>} r - Array of row indices\n     * @param {Number} j0 - Initial column index\n     * @param {Number} j1 - Final column index\n     * @returns {Array} The sub-matrix matrix(r(:),j0:j1)\n     */\n    getMatrix(matrix, r, j0, j1) {\n        const X = new Array(r.length);\n        const m = j1 - j0 + 1;\n\n        for (let i = 0, len = r.length; i < len; i++) {\n            X[i] = new Array(m);\n\n            for (let j = j0; j <= j1; j++) {\n                X[i][j - j0] = matrix[r[i]][j];\n            }\n        }\n\n        return X;\n    },\n\n    /**\n     * Get a submatrix of matrix\n     * @param {Array.<Array.<Number>>} matrix - original matrix\n     * @param {Number} i0 - Initial row index\n     * @param {Number} i1 - Final row index\n     * @param {Number} j0 - Initial column index\n     * @param {Number} j1 - Final column index\n     * @return {Array} The sub-matrix matrix(i0:i1,j0:j1)\n     */\n    getSubMatrix(matrix, i0, i1, j0, j1) {\n        const size = j1 - j0 + 1;\n        const X = new Array(i1 - i0 + 1);\n\n        for (let i = i0; i <= i1; i++) {\n            const subI = i - i0;\n            X[subI] = new Array(size);\n\n            for (let j = j0; j <= j1; j++) {\n                X[subI][j - j0] = matrix[i][j];\n            }\n        }\n\n        return X;\n    },\n\n    /**\n     * Linear algebraic matrix multiplication, X = A * B\n     * @param {Array.<Array.<Number>>} A\n     * @param {Array.<Array.<Number>>} B\n     * @return {Array.<Array.<Number>>} Matrix product, A * B\n     */\n    mult(matrix1, matrix2) {\n        if (matrix2.length != matrix1[0].length){\n            console.log('Matrix inner dimensions must agree:');\n        }\n\n        var X = new Array(matrix1.length),\n            Bcolj = new Array(matrix1[0].length);\n\n        for (var j = 0; j < matrix2[0].length; j++){\n            for (var k = 0; k < matrix1[0].length; k++){\n                Bcolj[k] = matrix2[k][j];\n            }\n            for (var i = 0; i < matrix1.length; i++){\n\n                if (j === 0)\n                    X[i] = new Array(matrix2[0].length);\n\n                var Arowi = matrix1[i];\n                var s = 0;\n                for (var k = 0; k < matrix1[0].length; k++){\n                    s += Arowi[k]*Bcolj[k];\n                }\n                X[i][j] = s;\n            }\n        }\n        return X;\n    },\n\n    /**\n     * Multiply a matrix by a scalar, X = s*A\n     * @param {Array.<Array.<Number>>}  A - matrix\n     * @param {Number}                  s - scalar\n     * @return {Array.<Array.<Number>>} s*A\n     */\n    multScalar(A, s) {\n        const rows = A.length;\n        const cols = A[0].length;\n\n        const X = new Array(rows);\n\n        for (let i = 0; i < rows; i++) {\n            X[i] = new Array(cols);\n\n            for (let j = 0; j < cols; j++) {\n                X[i][j] = A[i][j] * s;\n            }\n        }\n\n        return X;\n    },\n\n    /**\n     * Linear algebraic matrix addition, X = A + B\n     * @param {Array.<Array.<Number>>} A\n     * @param {Array.<Array.<Number>>} B\n     * @return {Array.<Array.<Number>>} A + B\n     */\n    add(A, B) {\n        return applyArithmeticOperation(A, B, (a, b) => a + b);\n    },\n\n    /**\n     * Linear algebraic matrix subtraction, X = A - B\n     * @param {Array.<Array.<Number>>} A\n     * @param {Array.<Array.<Number>>} B\n     * @return {Array.<Array.<Number>>} A - B\n     */\n    sub(A, B) {\n        return applyArithmeticOperation(A, B, (a, b) => a - b);\n    },\n\n    /**\n     * Matrix inverse or pseudoinverse, based on WEKA code\n     * @param {Array.<Array.<Number>>} A - original matrix\n     * @return inverse(A) if A is square, pseudoinverse otherwise.\n     */\n    inv(A) {\n        return mat.solve(A, mat.identity(A.length, A[0].length));\n    },\n\n    /**\n     * Generate identity matrix, based on WEKA code\n     * @param {Number} m - number of rows.\n     * @param {Number} [n] - number of colums, n = m if undefined.\n     * @return {Array.<Array.<Number>>} An m * n matrix with ones on the diagonal and zeros elsewhere.\n     */\n    identity(m, n = m) {\n        const X = new Array(m);\n\n        for (let i = 0; i < m; i++) {\n            X[i] = new Array(n);\n\n            for (let j = 0; j < n; j++) {\n                X[i][j] = (i === j ? 1.0 : 0.0);\n            }\n        }\n\n        return X;\n    },\n\n    /**\n     * Solve A*X = B, based on WEKA code\n     * @param {Array.<Array.<Number>>} A - left matrix of equation to be solved\n     * @param {Array.<Array.<Number>>} B - right matrix of equation to be solved\n     * @return {Array.<Array.<Number>>}  solution if A is square, least squares solution otherwiseis\n     */\n    solve(A, B) {\n        if (A.length === A[0].length) {\n            // A is square\n            return mat.LUDecomposition(A, B);\n        }\n\n        return mat.QRDecomposition(A, B);\n    },\n\n    /**\n     * LUDecomposition to solve A*X = B, based on WEKA code\n     * @param {Array.<Array.<Number>>} A - left matrix of equation to be solved\n     * @param {Array.<Array.<Number>>} B - right matrix of equation to be solved\n     * @return {Array.<Array.<Number>>} X so that L*U*X = B(piv,:)\n     */\n    LUDecomposition(A, B) {\n        var LU = new Array(A.length);\n\n        for (var i = 0; i < A.length; i++){\n            LU[i] = new Array(A[0].length);\n            for (var j = 0; j < A[0].length; j++){\n                LU[i][j] = A[i][j];\n            }\n        }\n\n        var m = A.length;\n        var n = A[0].length;\n        var piv = new Array(m);\n        for (var i = 0; i < m; i++){\n            piv[i] = i;\n        }\n        var pivsign = 1;\n        var LUrowi = new Array();\n        var LUcolj = new Array(m);\n        // Outer loop.\n        for (var j = 0; j < n; j++){\n            // Make a copy of the j-th column to localize references.\n            for (var i = 0; i < m; i++){\n                LUcolj[i] = LU[i][j];\n            }\n            // Apply previous transformations.\n            for (var i = 0; i < m; i++){\n                LUrowi = LU[i];\n                // Most of the time is spent in the following dot product.\n                var kmax = Math.min(i,j);\n                var s = 0;\n                for (var k = 0; k < kmax; k++){\n                    s += LUrowi[k]*LUcolj[k];\n                }\n                LUrowi[j] = LUcolj[i] -= s;\n            }\n            // Find pivot and exchange if necessary.\n            var p = j;\n            for (var i = j+1; i < m; i++){\n                if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])){\n                    p = i;\n                }\n            }\n            if (p != j){\n                for (var k = 0; k < n; k++){\n                    var t = LU[p][k];\n                    LU[p][k] = LU[j][k];\n                    LU[j][k] = t;\n                }\n                var k = piv[p];\n                piv[p] = piv[j];\n                piv[j] = k;\n                pivsign = -pivsign;\n            }\n            // Compute multipliers.\n            if (j < m & LU[j][j] != 0){\n                for (var i = j+1; i < m; i++){\n                    LU[i][j] /= LU[j][j];\n                }\n            }\n        }\n        if (B.length != m){\n            console.log('Matrix row dimensions must agree.');\n        }\n        for (var j = 0; j < n; j++){\n            if (LU[j][j] === 0){\n                console.log('Matrix is singular.')\n            }\n        }\n        var nx = B[0].length;\n        var X = mat.getMatrix(B,piv,0,nx-1);\n        // Solve L*Y = B(piv,:)\n        for (var k = 0; k < n; k++){\n            for (var i = k+1; i < n; i++){\n                for (var j = 0; j < nx; j++){\n                    X[i][j] -= X[k][j]*LU[i][k];\n                }\n            }\n        }\n        // Solve U*X = Y;\n        for (var k = n-1; k >= 0; k--){\n            for (var j = 0; j < nx; j++){\n                X[k][j] /= LU[k][k];\n            }\n            for (var i = 0; i < k; i++){\n                for (var j = 0; j < nx; j++){\n                    X[i][j] -= X[k][j]*LU[i][k];\n                }\n            }\n        }\n        return X;\n    },\n\n    /**\n     * Least squares solution of A*X = B, based on WEKA code\n     * @param {Array.<Array.<Number>>} A - left side matrix to be solved\n     * @param {Array.<Array.<Number>>} B - a matrix with as many rows as A and any number of columns.\n     * @return {Array.<Array.<Number>>} X - that minimizes the two norms of QR*X-B.\n     */\n    QRDecomposition(A, B) {\n        // Initialize.\n        var QR = new Array(A.length);\n\n        for (var i = 0; i < A.length; i++){\n            QR[i] = new Array(A[0].length);\n            for (var j = 0; j < A[0].length; j++){\n                QR[i][j] = A[i][j];\n            }\n        }\n        var m = A.length;\n        var n = A[0].length;\n        var Rdiag = new Array(n);\n        var nrm;\n\n        // Main loop.\n        for (var k = 0; k < n; k++){\n            // Compute 2-norm of k-th column without under/overflow.\n            nrm = 0;\n            for (var i = k; i < m; i++){\n                nrm = Math.hypot(nrm,QR[i][k]);\n            }\n            if (nrm != 0){\n                // Form k-th Householder vector.\n                if (QR[k][k] < 0){\n                    nrm = -nrm;\n                }\n                for (var i = k; i < m; i++){\n                    QR[i][k] /= nrm;\n                }\n                QR[k][k] += 1;\n\n                // Apply transformation to remaining columns.\n                for (var j = k+1; j < n; j++){\n                    var s = 0;\n                    for (var i = k; i < m; i++){\n                        s += QR[i][k]*QR[i][j];\n                    }\n                    s = -s/QR[k][k];\n                    for (var i = k; i < m; i++){\n                        QR[i][j] += s*QR[i][k];\n                    }\n                }\n            }\n            Rdiag[k] = -nrm;\n        }\n        if (B.length != m){\n            console.log('Matrix row dimensions must agree.');\n        }\n        for (var j = 0; j < n; j++){\n            if (Rdiag[j] === 0)\n                console.log('Matrix is rank deficient');\n        }\n        // Copy right hand side\n        var nx = B[0].length;\n        var X = new Array(B.length);\n        for(var i=0; i<B.length; i++){\n            X[i] = new Array(B[0].length);\n        }\n        for (var i = 0; i < B.length; i++){\n            for (var j = 0; j < B[0].length; j++){\n                X[i][j] = B[i][j];\n            }\n        }\n        // Compute Y = transpose(Q)*B\n        for (var k = 0; k < n; k++){\n            for (var j = 0; j < nx; j++){\n                var s = 0.0;\n                for (var i = k; i < m; i++){\n                    s += QR[i][k]*X[i][j];\n                }\n                s = -s/QR[k][k];\n                for (var i = k; i < m; i++){\n                    X[i][j] += s*QR[i][k];\n                }\n            }\n        }\n        // Solve R*X = Y;\n        for (var k = n-1; k >= 0; k--){\n            for (var j = 0; j < nx; j++){\n                X[k][j] /= Rdiag[k];\n            }\n            for (var i = 0; i < k; i++){\n                for (var j = 0; j < nx; j++){\n                    X[i][j] -= X[k][j]*QR[i][k];\n                }\n            }\n        }\n        return mat.getSubMatrix(X,0,n-1,0,nx-1);\n    }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mat);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/webgazer/src/mat.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/webgazer/src/params.mjs":
/*!**********************************************!*\
  !*** ./node_modules/webgazer/src/params.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst params = {\n  moveTickSize: 50,\n  videoContainerId: 'webgazerVideoContainer',\n  videoElementId: 'webgazerVideoFeed',\n  videoElementCanvasId: 'webgazerVideoCanvas',\n  faceOverlayId: 'webgazerFaceOverlay',\n  faceFeedbackBoxId: 'webgazerFaceFeedbackBox',\n  gazeDotId: 'webgazerGazeDot',\n  videoViewerWidth: 320,\n  videoViewerHeight: 240,\n  faceFeedbackBoxRatio: 0.66,\n  // View options\n  showVideo: true,\n  mirrorVideo: true,\n  showFaceOverlay: true,\n  showFaceFeedbackBox: true,\n  showGazeDot: true,\n  camConstraints: { video: { width: { min: 320, ideal: 640, max: 1920 }, height: { min: 240, ideal: 480, max: 1080 }, facingMode: \"user\" } },\n  dataTimestep: 50,\n  showVideoPreview: true,\n  applyKalmanFilter: true,\n  saveDataAcrossSessions: true,\n  // Whether or not to store accuracy eigenValues, used by the calibration example file\n  storingPoints: false,\n\n  trackEye: 'both',\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (params);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViZ2F6ZXIvc3JjL3BhcmFtcy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUyxTQUFTLGlDQUFpQyxZQUFZLGlDQUFpQyx3QkFBd0I7QUFDNUk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUVBQWUsTUFBTSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZWNvbW1lcmNlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvd2ViZ2F6ZXIvc3JjL3BhcmFtcy5tanM/ZGU4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXJhbXMgPSB7XG4gIG1vdmVUaWNrU2l6ZTogNTAsXG4gIHZpZGVvQ29udGFpbmVySWQ6ICd3ZWJnYXplclZpZGVvQ29udGFpbmVyJyxcbiAgdmlkZW9FbGVtZW50SWQ6ICd3ZWJnYXplclZpZGVvRmVlZCcsXG4gIHZpZGVvRWxlbWVudENhbnZhc0lkOiAnd2ViZ2F6ZXJWaWRlb0NhbnZhcycsXG4gIGZhY2VPdmVybGF5SWQ6ICd3ZWJnYXplckZhY2VPdmVybGF5JyxcbiAgZmFjZUZlZWRiYWNrQm94SWQ6ICd3ZWJnYXplckZhY2VGZWVkYmFja0JveCcsXG4gIGdhemVEb3RJZDogJ3dlYmdhemVyR2F6ZURvdCcsXG4gIHZpZGVvVmlld2VyV2lkdGg6IDMyMCxcbiAgdmlkZW9WaWV3ZXJIZWlnaHQ6IDI0MCxcbiAgZmFjZUZlZWRiYWNrQm94UmF0aW86IDAuNjYsXG4gIC8vIFZpZXcgb3B0aW9uc1xuICBzaG93VmlkZW86IHRydWUsXG4gIG1pcnJvclZpZGVvOiB0cnVlLFxuICBzaG93RmFjZU92ZXJsYXk6IHRydWUsXG4gIHNob3dGYWNlRmVlZGJhY2tCb3g6IHRydWUsXG4gIHNob3dHYXplRG90OiB0cnVlLFxuICBjYW1Db25zdHJhaW50czogeyB2aWRlbzogeyB3aWR0aDogeyBtaW46IDMyMCwgaWRlYWw6IDY0MCwgbWF4OiAxOTIwIH0sIGhlaWdodDogeyBtaW46IDI0MCwgaWRlYWw6IDQ4MCwgbWF4OiAxMDgwIH0sIGZhY2luZ01vZGU6IFwidXNlclwiIH0gfSxcbiAgZGF0YVRpbWVzdGVwOiA1MCxcbiAgc2hvd1ZpZGVvUHJldmlldzogdHJ1ZSxcbiAgYXBwbHlLYWxtYW5GaWx0ZXI6IHRydWUsXG4gIHNhdmVEYXRhQWNyb3NzU2Vzc2lvbnM6IHRydWUsXG4gIC8vIFdoZXRoZXIgb3Igbm90IHRvIHN0b3JlIGFjY3VyYWN5IGVpZ2VuVmFsdWVzLCB1c2VkIGJ5IHRoZSBjYWxpYnJhdGlvbiBleGFtcGxlIGZpbGVcbiAgc3RvcmluZ1BvaW50czogZmFsc2UsXG5cbiAgdHJhY2tFeWU6ICdib3RoJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBhcmFtcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/webgazer/src/params.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/webgazer/src/ridgeReg.mjs":
/*!************************************************!*\
  !*** ./node_modules/webgazer/src/ridgeReg.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _util_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.mjs */ \"(ssr)/./node_modules/webgazer/src/util.mjs\");\n/* harmony import */ var _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util_regression.mjs */ \"(ssr)/./node_modules/webgazer/src/util_regression.mjs\");\n/* harmony import */ var _params_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./params.mjs */ \"(ssr)/./node_modules/webgazer/src/params.mjs\");\n\n\n\n\nconst reg = {};\n\n/**\n * Constructor of RidgeReg object,\n * this object allow to perform ridge regression\n * @constructor\n */\nreg.RidgeReg = function() {\n  this.init();\n};\n\n/**\n * Initialize new arrays and initialize Kalman filter.\n */\nreg.RidgeReg.prototype.init = _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].InitRegression\n\n/**\n * Add given data from eyes\n * @param {Object} eyes - eyes where extract data to add\n * @param {Object} screenPos - The current screen point\n * @param {Object} type - The type of performed action\n */\nreg.RidgeReg.prototype.addData = _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addData\n\n/**\n * Try to predict coordinates from pupil data\n * after apply linear regression on data set\n * @param {Object} eyesObj - The current user eyes object\n * @returns {Object}\n */\nreg.RidgeReg.prototype.predict = function(eyesObj) {\n  if (!eyesObj || this.eyeFeaturesClicks.length === 0) {\n    return null;\n  }\n  var acceptTime = performance.now() - this.trailTime;\n  var trailX = [];\n  var trailY = [];\n  var trailFeat = [];\n  for (var i = 0; i < this.trailDataWindow; i++) {\n    if (this.trailTimes.get(i) > acceptTime) {\n      trailX.push(this.screenXTrailArray.get(i));\n      trailY.push(this.screenYTrailArray.get(i));\n      trailFeat.push(this.eyeFeaturesTrail.get(i));\n    }\n  }\n\n  var screenXArray = this.screenXClicksArray.data.concat(trailX);\n  var screenYArray = this.screenYClicksArray.data.concat(trailY);\n  var eyeFeatures = this.eyeFeaturesClicks.data.concat(trailFeat);\n\n  var coefficientsX = _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ridge(screenXArray, eyeFeatures, this.ridgeParameter);\n  var coefficientsY = _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ridge(screenYArray, eyeFeatures, this.ridgeParameter);\n\n  var eyeFeats = _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getEyeFeats(eyesObj);\n  var predictedX = 0;\n  for(var i=0; i< eyeFeats.length; i++){\n    predictedX += eyeFeats[i] * coefficientsX[i];\n  }\n  var predictedY = 0;\n  for(var i=0; i< eyeFeats.length; i++){\n    predictedY += eyeFeats[i] * coefficientsY[i];\n  }\n\n  predictedX = Math.floor(predictedX);\n  predictedY = Math.floor(predictedY);\n\n  if (_params_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].applyKalmanFilter) {\n    // Update Kalman model, and get prediction\n    var newGaze = [predictedX, predictedY]; // [20200607 xk] Should we use a 1x4 vector?\n    newGaze = this.kalman.update(newGaze);\n\n    return {\n      x: newGaze[0],\n      y: newGaze[1]\n    };\n  } else {\n    return {\n      x: predictedX,\n      y: predictedY\n    };\n  }\n};\n\nreg.RidgeReg.prototype.setData = _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setData;\n\n/**\n * Return the data\n * @returns {Array.<Object>|*}\n */\nreg.RidgeReg.prototype.getData = function() {\n  return this.dataClicks.data;\n}\n\n/**\n * The RidgeReg object name\n * @type {string}\n */\nreg.RidgeReg.prototype.name = 'ridge';\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (reg);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViZ2F6ZXIvc3JjL3JpZGdlUmVnLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThCO0FBQ3NCO0FBQ2xCOztBQUVsQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw0REFBZTs7QUFFN0M7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsaUNBQWlDLDREQUFlOztBQUVoRDtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwQkFBMEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsNERBQWU7QUFDckMsc0JBQXNCLDREQUFlOztBQUVyQyxpQkFBaUIsaURBQUk7QUFDckI7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQztBQUNBO0FBQ0E7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQztBQUNBOztBQUVBO0FBQ0E7O0FBRUEsTUFBTSxtREFBTTtBQUNaO0FBQ0EsNENBQTRDO0FBQzVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMsNERBQWU7O0FBRWhEO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBLGlFQUFlLEdBQUcsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWVjb21tZXJjZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3dlYmdhemVyL3NyYy9yaWRnZVJlZy5tanM/YzMxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXRpbCBmcm9tICcuL3V0aWwubWpzJztcbmltcG9ydCB1dGlsX3JlZ3Jlc3Npb24gZnJvbSAnLi91dGlsX3JlZ3Jlc3Npb24ubWpzJztcbmltcG9ydCBwYXJhbXMgZnJvbSAnLi9wYXJhbXMubWpzJztcblxuY29uc3QgcmVnID0ge307XG5cbi8qKlxuICogQ29uc3RydWN0b3Igb2YgUmlkZ2VSZWcgb2JqZWN0LFxuICogdGhpcyBvYmplY3QgYWxsb3cgdG8gcGVyZm9ybSByaWRnZSByZWdyZXNzaW9uXG4gKiBAY29uc3RydWN0b3JcbiAqL1xucmVnLlJpZGdlUmVnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW5pdCgpO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIG5ldyBhcnJheXMgYW5kIGluaXRpYWxpemUgS2FsbWFuIGZpbHRlci5cbiAqL1xucmVnLlJpZGdlUmVnLnByb3RvdHlwZS5pbml0ID0gdXRpbF9yZWdyZXNzaW9uLkluaXRSZWdyZXNzaW9uXG5cbi8qKlxuICogQWRkIGdpdmVuIGRhdGEgZnJvbSBleWVzXG4gKiBAcGFyYW0ge09iamVjdH0gZXllcyAtIGV5ZXMgd2hlcmUgZXh0cmFjdCBkYXRhIHRvIGFkZFxuICogQHBhcmFtIHtPYmplY3R9IHNjcmVlblBvcyAtIFRoZSBjdXJyZW50IHNjcmVlbiBwb2ludFxuICogQHBhcmFtIHtPYmplY3R9IHR5cGUgLSBUaGUgdHlwZSBvZiBwZXJmb3JtZWQgYWN0aW9uXG4gKi9cbnJlZy5SaWRnZVJlZy5wcm90b3R5cGUuYWRkRGF0YSA9IHV0aWxfcmVncmVzc2lvbi5hZGREYXRhXG5cbi8qKlxuICogVHJ5IHRvIHByZWRpY3QgY29vcmRpbmF0ZXMgZnJvbSBwdXBpbCBkYXRhXG4gKiBhZnRlciBhcHBseSBsaW5lYXIgcmVncmVzc2lvbiBvbiBkYXRhIHNldFxuICogQHBhcmFtIHtPYmplY3R9IGV5ZXNPYmogLSBUaGUgY3VycmVudCB1c2VyIGV5ZXMgb2JqZWN0XG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5yZWcuUmlkZ2VSZWcucHJvdG90eXBlLnByZWRpY3QgPSBmdW5jdGlvbihleWVzT2JqKSB7XG4gIGlmICghZXllc09iaiB8fCB0aGlzLmV5ZUZlYXR1cmVzQ2xpY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBhY2NlcHRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCkgLSB0aGlzLnRyYWlsVGltZTtcbiAgdmFyIHRyYWlsWCA9IFtdO1xuICB2YXIgdHJhaWxZID0gW107XG4gIHZhciB0cmFpbEZlYXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRyYWlsRGF0YVdpbmRvdzsgaSsrKSB7XG4gICAgaWYgKHRoaXMudHJhaWxUaW1lcy5nZXQoaSkgPiBhY2NlcHRUaW1lKSB7XG4gICAgICB0cmFpbFgucHVzaCh0aGlzLnNjcmVlblhUcmFpbEFycmF5LmdldChpKSk7XG4gICAgICB0cmFpbFkucHVzaCh0aGlzLnNjcmVlbllUcmFpbEFycmF5LmdldChpKSk7XG4gICAgICB0cmFpbEZlYXQucHVzaCh0aGlzLmV5ZUZlYXR1cmVzVHJhaWwuZ2V0KGkpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgc2NyZWVuWEFycmF5ID0gdGhpcy5zY3JlZW5YQ2xpY2tzQXJyYXkuZGF0YS5jb25jYXQodHJhaWxYKTtcbiAgdmFyIHNjcmVlbllBcnJheSA9IHRoaXMuc2NyZWVuWUNsaWNrc0FycmF5LmRhdGEuY29uY2F0KHRyYWlsWSk7XG4gIHZhciBleWVGZWF0dXJlcyA9IHRoaXMuZXllRmVhdHVyZXNDbGlja3MuZGF0YS5jb25jYXQodHJhaWxGZWF0KTtcblxuICB2YXIgY29lZmZpY2llbnRzWCA9IHV0aWxfcmVncmVzc2lvbi5yaWRnZShzY3JlZW5YQXJyYXksIGV5ZUZlYXR1cmVzLCB0aGlzLnJpZGdlUGFyYW1ldGVyKTtcbiAgdmFyIGNvZWZmaWNpZW50c1kgPSB1dGlsX3JlZ3Jlc3Npb24ucmlkZ2Uoc2NyZWVuWUFycmF5LCBleWVGZWF0dXJlcywgdGhpcy5yaWRnZVBhcmFtZXRlcik7XG5cbiAgdmFyIGV5ZUZlYXRzID0gdXRpbC5nZXRFeWVGZWF0cyhleWVzT2JqKTtcbiAgdmFyIHByZWRpY3RlZFggPSAwO1xuICBmb3IodmFyIGk9MDsgaTwgZXllRmVhdHMubGVuZ3RoOyBpKyspe1xuICAgIHByZWRpY3RlZFggKz0gZXllRmVhdHNbaV0gKiBjb2VmZmljaWVudHNYW2ldO1xuICB9XG4gIHZhciBwcmVkaWN0ZWRZID0gMDtcbiAgZm9yKHZhciBpPTA7IGk8IGV5ZUZlYXRzLmxlbmd0aDsgaSsrKXtcbiAgICBwcmVkaWN0ZWRZICs9IGV5ZUZlYXRzW2ldICogY29lZmZpY2llbnRzWVtpXTtcbiAgfVxuXG4gIHByZWRpY3RlZFggPSBNYXRoLmZsb29yKHByZWRpY3RlZFgpO1xuICBwcmVkaWN0ZWRZID0gTWF0aC5mbG9vcihwcmVkaWN0ZWRZKTtcblxuICBpZiAocGFyYW1zLmFwcGx5S2FsbWFuRmlsdGVyKSB7XG4gICAgLy8gVXBkYXRlIEthbG1hbiBtb2RlbCwgYW5kIGdldCBwcmVkaWN0aW9uXG4gICAgdmFyIG5ld0dhemUgPSBbcHJlZGljdGVkWCwgcHJlZGljdGVkWV07IC8vIFsyMDIwMDYwNyB4a10gU2hvdWxkIHdlIHVzZSBhIDF4NCB2ZWN0b3I/XG4gICAgbmV3R2F6ZSA9IHRoaXMua2FsbWFuLnVwZGF0ZShuZXdHYXplKTtcblxuICAgIHJldHVybiB7XG4gICAgICB4OiBuZXdHYXplWzBdLFxuICAgICAgeTogbmV3R2F6ZVsxXVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHByZWRpY3RlZFgsXG4gICAgICB5OiBwcmVkaWN0ZWRZXG4gICAgfTtcbiAgfVxufTtcblxucmVnLlJpZGdlUmVnLnByb3RvdHlwZS5zZXREYXRhID0gdXRpbF9yZWdyZXNzaW9uLnNldERhdGE7XG5cbi8qKlxuICogUmV0dXJuIHRoZSBkYXRhXG4gKiBAcmV0dXJucyB7QXJyYXkuPE9iamVjdD58Kn1cbiAqL1xucmVnLlJpZGdlUmVnLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmRhdGFDbGlja3MuZGF0YTtcbn1cblxuLyoqXG4gKiBUaGUgUmlkZ2VSZWcgb2JqZWN0IG5hbWVcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbnJlZy5SaWRnZVJlZy5wcm90b3R5cGUubmFtZSA9ICdyaWRnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHJlZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/webgazer/src/ridgeReg.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/webgazer/src/ridgeRegThreaded.mjs":
/*!********************************************************!*\
  !*** ./node_modules/webgazer/src/ridgeRegThreaded.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _util_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.mjs */ \"(ssr)/./node_modules/webgazer/src/util.mjs\");\n/* harmony import */ var _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util_regression.mjs */ \"(ssr)/./node_modules/webgazer/src/util_regression.mjs\");\n/* harmony import */ var _params_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./params.mjs */ \"(ssr)/./node_modules/webgazer/src/params.mjs\");\n/* harmony import */ var _mat_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat.mjs */ \"(ssr)/./node_modules/webgazer/src/mat.mjs\");\n\n\n\n\n\nconst reg = {};\n\nvar ridgeParameter = Math.pow(10,-5);\nvar dataWindow = 700;\nvar weights = {'X':[0],'Y':[0]};\nvar trailDataWindow = 10;\n\n\n/**\n * Constructor of RidgeRegThreaded object,\n * it retrieve data window, and prepare a worker,\n * this object allow to perform threaded ridge regression\n * @constructor\n */\nreg.RidgeRegThreaded = function() {\n    this.init();\n};\n\n/**\n * Initialize new arrays and initialize Kalman filter.\n */\nreg.RidgeRegThreaded.prototype.init = function() { \n    this.screenXClicksArray = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(dataWindow);  \n    this.screenYClicksArray = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(dataWindow);  \n    this.eyeFeaturesClicks = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(dataWindow);   \n\n    this.screenXTrailArray = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(trailDataWindow);  \n    this.screenYTrailArray = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(trailDataWindow);  \n    this.eyeFeaturesTrail = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(trailDataWindow);   \n\n    this.dataClicks = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(dataWindow);  \n    this.dataTrail = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(dataWindow);   \n\n    // Place the src/ridgeworker.js file into the same directory as your html file. \n    if (!this.worker) { \n        this.worker = new Worker('ridgeWorker.mjs'); // [20200708] TODO: Figure out how to make this inline \n        this.worker.onerror = function(err) { console.log(err.message); };  \n        this.worker.onmessage = function(evt) { \n            weights.X = evt.data.X; \n            weights.Y = evt.data.Y; \n        };  \n        console.log('initialized worker');  \n    }   \n\n    // Initialize Kalman filter [20200608 xk] what do we do about parameters?   \n    // [20200611 xk] unsure what to do w.r.t. dimensionality of these matrices. So far at least \n    //               by my own anecdotal observation a 4x1 x vector seems to work alright   \n    var F = [ [1, 0, 1, 0], \n              [0, 1, 0, 1], \n              [0, 0, 1, 0], \n              [0, 0, 0, 1]];    \n\n    //Parameters Q and R may require some fine tuning   \n    var Q = [ [1/4, 0,    1/2, 0],  \n              [0,   1/4,  0,   1/2],    \n              [1/2, 0,    1,   0],  \n              [0,  1/2,  0,   1]];// * delta_t  \n    var delta_t = 1/10; // The amount of time between frames    \n    Q = _mat_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"].multScalar(Q, delta_t);    \n\n    var H = [ [1, 0, 0, 0, 0, 0],   \n              [0, 1, 0, 0, 0, 0],   \n              [0, 0, 1, 0, 0, 0],   \n              [0, 0, 0, 1, 0, 0]];  \n    var H = [ [1, 0, 0, 0], \n              [0, 1, 0, 0]];    \n    var pixel_error = 47; //We will need to fine tune this value [20200611 xk] I just put a random value here   \n\n    //This matrix represents the expected measurement error \n    var R = _mat_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"].multScalar(_mat_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"].identity(2), pixel_error);  \n\n    var P_initial = _mat_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"].multScalar(_mat_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"].identity(4), 0.0001); //Initial covariance matrix   \n    var x_initial = [[500], [500], [0], [0]]; // Initial measurement matrix \n\n    this.kalman = new _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].KalmanFilter(F, H, Q, R, P_initial, x_initial);  \n}\n/**\n * Add given data from eyes\n * @param {Object} eyes - eyes where extract data to add\n * @param {Object} screenPos - The current screen point\n * @param {Object} type - The type of performed action\n */\nreg.RidgeRegThreaded.prototype.addData = function(eyes, screenPos, type) {\n    if (!eyes) {\n        return;\n    }\n    //not doing anything with blink at present\n    // if (eyes.left.blink || eyes.right.blink) {\n    //     return;\n    // }\n    this.worker.postMessage({'eyes':_util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getEyeFeats(eyes), 'screenPos':screenPos, 'type':type});\n};\n\n/**\n * Try to predict coordinates from pupil data\n * after apply linear regression on data set\n * @param {Object} eyesObj - The current user eyes object\n * @returns {Object}\n */\nreg.RidgeRegThreaded.prototype.predict = function(eyesObj) {\n    // console.log('LOGGING..');\n    if (!eyesObj) {\n        return null;\n    }\n    var coefficientsX = weights.X;\n    var coefficientsY = weights.Y;\n\n    var eyeFeats = _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getEyeFeats(eyesObj);\n    var predictedX = 0, predictedY = 0;\n    for(var i=0; i< eyeFeats.length; i++){\n        predictedX += eyeFeats[i] * coefficientsX[i];\n        predictedY += eyeFeats[i] * coefficientsY[i];\n    }\n\n    predictedX = Math.floor(predictedX);\n    predictedY = Math.floor(predictedY);\n\n    if (_params_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].applyKalmanFilter) {\n        // Update Kalman model, and get prediction\n        var newGaze = [predictedX, predictedY]; // [20200607 xk] Should we use a 1x4 vector?\n        newGaze = this.kalman.update(newGaze);\n\n        return {\n            x: newGaze[0],\n            y: newGaze[1]\n        };\n    } else {\n        return {\n            x: predictedX,\n            y: predictedY\n        };\n    }\n};\n\n/**\n * Add given data to current data set then,\n * replace current data member with given data\n * @param {Array.<Object>} data - The data to set\n */\nreg.RidgeRegThreaded.prototype.setData = _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setData\n\n/**\n * Return the data\n * @returns {Array.<Object>|*}\n */\nreg.RidgeRegThreaded.prototype.getData = function() {\n    return this.dataClicks.data;\n};\n\n/**\n * The RidgeRegThreaded object name\n * @type {string}\n */\nreg.RidgeRegThreaded.prototype.name = 'ridge';\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (reg);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViZ2F6ZXIvc3JjL3JpZGdlUmVnVGhyZWFkZWQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQThCO0FBQ3NCO0FBQ2xCO0FBQ047O0FBRTVCOztBQUVBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxpREFBSTtBQUN0QyxrQ0FBa0MsaURBQUk7QUFDdEMsaUNBQWlDLGlEQUFJOztBQUVyQyxpQ0FBaUMsaURBQUk7QUFDckMsaUNBQWlDLGlEQUFJO0FBQ3JDLGdDQUFnQyxpREFBSTs7QUFFcEMsMEJBQTBCLGlEQUFJO0FBQzlCLHlCQUF5QixpREFBSTs7QUFFN0I7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRCw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLHdCQUF3QjtBQUN4QixRQUFRLGdEQUFHOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjs7QUFFMUI7QUFDQSxZQUFZLGdEQUFHLFlBQVksZ0RBQUc7O0FBRTlCLG9CQUFvQixnREFBRyxZQUFZLGdEQUFHLHVCQUF1QjtBQUM3RCw4Q0FBOEM7O0FBRTlDLHNCQUFzQiw0REFBZTtBQUNyQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsT0FBTyxpREFBSSx1REFBdUQ7QUFDL0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixpREFBSTtBQUN2QjtBQUNBLGlCQUFpQixvQkFBb0I7QUFDckM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsUUFBUSxtREFBTTtBQUNkO0FBQ0EsZ0RBQWdEO0FBQ2hEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBLHlDQUF5Qyw0REFBZTs7QUFFeEQ7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUEsaUVBQWUsR0FBRyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZWNvbW1lcmNlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvd2ViZ2F6ZXIvc3JjL3JpZGdlUmVnVGhyZWFkZWQubWpzPzJjNGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHV0aWwgZnJvbSAnLi91dGlsLm1qcyc7XG5pbXBvcnQgdXRpbF9yZWdyZXNzaW9uIGZyb20gJy4vdXRpbF9yZWdyZXNzaW9uLm1qcyc7XG5pbXBvcnQgcGFyYW1zIGZyb20gJy4vcGFyYW1zLm1qcyc7XG5pbXBvcnQgbWF0IGZyb20gJy4vbWF0Lm1qcyc7XG5cbmNvbnN0IHJlZyA9IHt9O1xuXG52YXIgcmlkZ2VQYXJhbWV0ZXIgPSBNYXRoLnBvdygxMCwtNSk7XG52YXIgZGF0YVdpbmRvdyA9IDcwMDtcbnZhciB3ZWlnaHRzID0geydYJzpbMF0sJ1knOlswXX07XG52YXIgdHJhaWxEYXRhV2luZG93ID0gMTA7XG5cblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBvZiBSaWRnZVJlZ1RocmVhZGVkIG9iamVjdCxcbiAqIGl0IHJldHJpZXZlIGRhdGEgd2luZG93LCBhbmQgcHJlcGFyZSBhIHdvcmtlcixcbiAqIHRoaXMgb2JqZWN0IGFsbG93IHRvIHBlcmZvcm0gdGhyZWFkZWQgcmlkZ2UgcmVncmVzc2lvblxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnJlZy5SaWRnZVJlZ1RocmVhZGVkID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbml0KCk7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgbmV3IGFycmF5cyBhbmQgaW5pdGlhbGl6ZSBLYWxtYW4gZmlsdGVyLlxuICovXG5yZWcuUmlkZ2VSZWdUaHJlYWRlZC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkgeyBcbiAgICB0aGlzLnNjcmVlblhDbGlja3NBcnJheSA9IG5ldyB1dGlsLkRhdGFXaW5kb3coZGF0YVdpbmRvdyk7ICBcbiAgICB0aGlzLnNjcmVlbllDbGlja3NBcnJheSA9IG5ldyB1dGlsLkRhdGFXaW5kb3coZGF0YVdpbmRvdyk7ICBcbiAgICB0aGlzLmV5ZUZlYXR1cmVzQ2xpY2tzID0gbmV3IHV0aWwuRGF0YVdpbmRvdyhkYXRhV2luZG93KTsgICBcblxuICAgIHRoaXMuc2NyZWVuWFRyYWlsQXJyYXkgPSBuZXcgdXRpbC5EYXRhV2luZG93KHRyYWlsRGF0YVdpbmRvdyk7ICBcbiAgICB0aGlzLnNjcmVlbllUcmFpbEFycmF5ID0gbmV3IHV0aWwuRGF0YVdpbmRvdyh0cmFpbERhdGFXaW5kb3cpOyAgXG4gICAgdGhpcy5leWVGZWF0dXJlc1RyYWlsID0gbmV3IHV0aWwuRGF0YVdpbmRvdyh0cmFpbERhdGFXaW5kb3cpOyAgIFxuXG4gICAgdGhpcy5kYXRhQ2xpY2tzID0gbmV3IHV0aWwuRGF0YVdpbmRvdyhkYXRhV2luZG93KTsgIFxuICAgIHRoaXMuZGF0YVRyYWlsID0gbmV3IHV0aWwuRGF0YVdpbmRvdyhkYXRhV2luZG93KTsgICBcblxuICAgIC8vIFBsYWNlIHRoZSBzcmMvcmlkZ2V3b3JrZXIuanMgZmlsZSBpbnRvIHRoZSBzYW1lIGRpcmVjdG9yeSBhcyB5b3VyIGh0bWwgZmlsZS4gXG4gICAgaWYgKCF0aGlzLndvcmtlcikgeyBcbiAgICAgICAgdGhpcy53b3JrZXIgPSBuZXcgV29ya2VyKCdyaWRnZVdvcmtlci5tanMnKTsgLy8gWzIwMjAwNzA4XSBUT0RPOiBGaWd1cmUgb3V0IGhvdyB0byBtYWtlIHRoaXMgaW5saW5lIFxuICAgICAgICB0aGlzLndvcmtlci5vbmVycm9yID0gZnVuY3Rpb24oZXJyKSB7IGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTsgfTsgIFxuICAgICAgICB0aGlzLndvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldnQpIHsgXG4gICAgICAgICAgICB3ZWlnaHRzLlggPSBldnQuZGF0YS5YOyBcbiAgICAgICAgICAgIHdlaWdodHMuWSA9IGV2dC5kYXRhLlk7IFxuICAgICAgICB9OyAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdpbml0aWFsaXplZCB3b3JrZXInKTsgIFxuICAgIH0gICBcblxuICAgIC8vIEluaXRpYWxpemUgS2FsbWFuIGZpbHRlciBbMjAyMDA2MDggeGtdIHdoYXQgZG8gd2UgZG8gYWJvdXQgcGFyYW1ldGVycz8gICBcbiAgICAvLyBbMjAyMDA2MTEgeGtdIHVuc3VyZSB3aGF0IHRvIGRvIHcuci50LiBkaW1lbnNpb25hbGl0eSBvZiB0aGVzZSBtYXRyaWNlcy4gU28gZmFyIGF0IGxlYXN0IFxuICAgIC8vICAgICAgICAgICAgICAgYnkgbXkgb3duIGFuZWNkb3RhbCBvYnNlcnZhdGlvbiBhIDR4MSB4IHZlY3RvciBzZWVtcyB0byB3b3JrIGFscmlnaHQgICBcbiAgICB2YXIgRiA9IFsgWzEsIDAsIDEsIDBdLCBcbiAgICAgICAgICAgICAgWzAsIDEsIDAsIDFdLCBcbiAgICAgICAgICAgICAgWzAsIDAsIDEsIDBdLCBcbiAgICAgICAgICAgICAgWzAsIDAsIDAsIDFdXTsgICAgXG5cbiAgICAvL1BhcmFtZXRlcnMgUSBhbmQgUiBtYXkgcmVxdWlyZSBzb21lIGZpbmUgdHVuaW5nICAgXG4gICAgdmFyIFEgPSBbIFsxLzQsIDAsICAgIDEvMiwgMF0sICBcbiAgICAgICAgICAgICAgWzAsICAgMS80LCAgMCwgICAxLzJdLCAgICBcbiAgICAgICAgICAgICAgWzEvMiwgMCwgICAgMSwgICAwXSwgIFxuICAgICAgICAgICAgICBbMCwgIDEvMiwgIDAsICAgMV1dOy8vICogZGVsdGFfdCAgXG4gICAgdmFyIGRlbHRhX3QgPSAxLzEwOyAvLyBUaGUgYW1vdW50IG9mIHRpbWUgYmV0d2VlbiBmcmFtZXMgICAgXG4gICAgUSA9IG1hdC5tdWx0U2NhbGFyKFEsIGRlbHRhX3QpOyAgICBcblxuICAgIHZhciBIID0gWyBbMSwgMCwgMCwgMCwgMCwgMF0sICAgXG4gICAgICAgICAgICAgIFswLCAxLCAwLCAwLCAwLCAwXSwgICBcbiAgICAgICAgICAgICAgWzAsIDAsIDEsIDAsIDAsIDBdLCAgIFxuICAgICAgICAgICAgICBbMCwgMCwgMCwgMSwgMCwgMF1dOyAgXG4gICAgdmFyIEggPSBbIFsxLCAwLCAwLCAwXSwgXG4gICAgICAgICAgICAgIFswLCAxLCAwLCAwXV07ICAgIFxuICAgIHZhciBwaXhlbF9lcnJvciA9IDQ3OyAvL1dlIHdpbGwgbmVlZCB0byBmaW5lIHR1bmUgdGhpcyB2YWx1ZSBbMjAyMDA2MTEgeGtdIEkganVzdCBwdXQgYSByYW5kb20gdmFsdWUgaGVyZSAgIFxuXG4gICAgLy9UaGlzIG1hdHJpeCByZXByZXNlbnRzIHRoZSBleHBlY3RlZCBtZWFzdXJlbWVudCBlcnJvciBcbiAgICB2YXIgUiA9IG1hdC5tdWx0U2NhbGFyKG1hdC5pZGVudGl0eSgyKSwgcGl4ZWxfZXJyb3IpOyAgXG5cbiAgICB2YXIgUF9pbml0aWFsID0gbWF0Lm11bHRTY2FsYXIobWF0LmlkZW50aXR5KDQpLCAwLjAwMDEpOyAvL0luaXRpYWwgY292YXJpYW5jZSBtYXRyaXggICBcbiAgICB2YXIgeF9pbml0aWFsID0gW1s1MDBdLCBbNTAwXSwgWzBdLCBbMF1dOyAvLyBJbml0aWFsIG1lYXN1cmVtZW50IG1hdHJpeCBcblxuICAgIHRoaXMua2FsbWFuID0gbmV3IHV0aWxfcmVncmVzc2lvbi5LYWxtYW5GaWx0ZXIoRiwgSCwgUSwgUiwgUF9pbml0aWFsLCB4X2luaXRpYWwpOyAgXG59XG4vKipcbiAqIEFkZCBnaXZlbiBkYXRhIGZyb20gZXllc1xuICogQHBhcmFtIHtPYmplY3R9IGV5ZXMgLSBleWVzIHdoZXJlIGV4dHJhY3QgZGF0YSB0byBhZGRcbiAqIEBwYXJhbSB7T2JqZWN0fSBzY3JlZW5Qb3MgLSBUaGUgY3VycmVudCBzY3JlZW4gcG9pbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlIC0gVGhlIHR5cGUgb2YgcGVyZm9ybWVkIGFjdGlvblxuICovXG5yZWcuUmlkZ2VSZWdUaHJlYWRlZC5wcm90b3R5cGUuYWRkRGF0YSA9IGZ1bmN0aW9uKGV5ZXMsIHNjcmVlblBvcywgdHlwZSkge1xuICAgIGlmICghZXllcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vbm90IGRvaW5nIGFueXRoaW5nIHdpdGggYmxpbmsgYXQgcHJlc2VudFxuICAgIC8vIGlmIChleWVzLmxlZnQuYmxpbmsgfHwgZXllcy5yaWdodC5ibGluaykge1xuICAgIC8vICAgICByZXR1cm47XG4gICAgLy8gfVxuICAgIHRoaXMud29ya2VyLnBvc3RNZXNzYWdlKHsnZXllcyc6dXRpbC5nZXRFeWVGZWF0cyhleWVzKSwgJ3NjcmVlblBvcyc6c2NyZWVuUG9zLCAndHlwZSc6dHlwZX0pO1xufTtcblxuLyoqXG4gKiBUcnkgdG8gcHJlZGljdCBjb29yZGluYXRlcyBmcm9tIHB1cGlsIGRhdGFcbiAqIGFmdGVyIGFwcGx5IGxpbmVhciByZWdyZXNzaW9uIG9uIGRhdGEgc2V0XG4gKiBAcGFyYW0ge09iamVjdH0gZXllc09iaiAtIFRoZSBjdXJyZW50IHVzZXIgZXllcyBvYmplY3RcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbnJlZy5SaWRnZVJlZ1RocmVhZGVkLnByb3RvdHlwZS5wcmVkaWN0ID0gZnVuY3Rpb24oZXllc09iaikge1xuICAgIC8vIGNvbnNvbGUubG9nKCdMT0dHSU5HLi4nKTtcbiAgICBpZiAoIWV5ZXNPYmopIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBjb2VmZmljaWVudHNYID0gd2VpZ2h0cy5YO1xuICAgIHZhciBjb2VmZmljaWVudHNZID0gd2VpZ2h0cy5ZO1xuXG4gICAgdmFyIGV5ZUZlYXRzID0gdXRpbC5nZXRFeWVGZWF0cyhleWVzT2JqKTtcbiAgICB2YXIgcHJlZGljdGVkWCA9IDAsIHByZWRpY3RlZFkgPSAwO1xuICAgIGZvcih2YXIgaT0wOyBpPCBleWVGZWF0cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHByZWRpY3RlZFggKz0gZXllRmVhdHNbaV0gKiBjb2VmZmljaWVudHNYW2ldO1xuICAgICAgICBwcmVkaWN0ZWRZICs9IGV5ZUZlYXRzW2ldICogY29lZmZpY2llbnRzWVtpXTtcbiAgICB9XG5cbiAgICBwcmVkaWN0ZWRYID0gTWF0aC5mbG9vcihwcmVkaWN0ZWRYKTtcbiAgICBwcmVkaWN0ZWRZID0gTWF0aC5mbG9vcihwcmVkaWN0ZWRZKTtcblxuICAgIGlmIChwYXJhbXMuYXBwbHlLYWxtYW5GaWx0ZXIpIHtcbiAgICAgICAgLy8gVXBkYXRlIEthbG1hbiBtb2RlbCwgYW5kIGdldCBwcmVkaWN0aW9uXG4gICAgICAgIHZhciBuZXdHYXplID0gW3ByZWRpY3RlZFgsIHByZWRpY3RlZFldOyAvLyBbMjAyMDA2MDcgeGtdIFNob3VsZCB3ZSB1c2UgYSAxeDQgdmVjdG9yP1xuICAgICAgICBuZXdHYXplID0gdGhpcy5rYWxtYW4udXBkYXRlKG5ld0dhemUpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBuZXdHYXplWzBdLFxuICAgICAgICAgICAgeTogbmV3R2F6ZVsxXVxuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBwcmVkaWN0ZWRYLFxuICAgICAgICAgICAgeTogcHJlZGljdGVkWVxuICAgICAgICB9O1xuICAgIH1cbn07XG5cbi8qKlxuICogQWRkIGdpdmVuIGRhdGEgdG8gY3VycmVudCBkYXRhIHNldCB0aGVuLFxuICogcmVwbGFjZSBjdXJyZW50IGRhdGEgbWVtYmVyIHdpdGggZ2l2ZW4gZGF0YVxuICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gZGF0YSAtIFRoZSBkYXRhIHRvIHNldFxuICovXG5yZWcuUmlkZ2VSZWdUaHJlYWRlZC5wcm90b3R5cGUuc2V0RGF0YSA9IHV0aWxfcmVncmVzc2lvbi5zZXREYXRhXG5cbi8qKlxuICogUmV0dXJuIHRoZSBkYXRhXG4gKiBAcmV0dXJucyB7QXJyYXkuPE9iamVjdD58Kn1cbiAqL1xucmVnLlJpZGdlUmVnVGhyZWFkZWQucHJvdG90eXBlLmdldERhdGEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhQ2xpY2tzLmRhdGE7XG59O1xuXG4vKipcbiAqIFRoZSBSaWRnZVJlZ1RocmVhZGVkIG9iamVjdCBuYW1lXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5yZWcuUmlkZ2VSZWdUaHJlYWRlZC5wcm90b3R5cGUubmFtZSA9ICdyaWRnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHJlZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/webgazer/src/ridgeRegThreaded.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/webgazer/src/ridgeWeightedReg.mjs":
/*!********************************************************!*\
  !*** ./node_modules/webgazer/src/ridgeWeightedReg.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _util_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.mjs */ \"(ssr)/./node_modules/webgazer/src/util.mjs\");\n/* harmony import */ var _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util_regression.mjs */ \"(ssr)/./node_modules/webgazer/src/util_regression.mjs\");\n/* harmony import */ var _params_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./params.mjs */ \"(ssr)/./node_modules/webgazer/src/params.mjs\");\n\n\n\n\nconst reg = {};\n\n/**\n * Constructor of RidgeWeightedReg object\n * @constructor\n */\nreg.RidgeWeightedReg = function() {\n    this.init();\n};\n\n/**\n * Initialize new arrays and initialize Kalman filter.\n */\nreg.RidgeWeightedReg.prototype.init = _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].InitRegression\n\n/**\n * Add given data from eyes\n * @param {Object} eyes - eyes where extract data to add\n * @param {Object} screenPos - The current screen point\n * @param {Object} type - The type of performed action\n */\nreg.RidgeWeightedReg.prototype.addData = _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addData\n\n/**\n * Try to predict coordinates from pupil data\n * after apply linear regression on data set\n * @param {Object} eyesObj - The current user eyes object\n * @returns {Object}\n */\nreg.RidgeWeightedReg.prototype.predict = function(eyesObj) {\n    if (!eyesObj || this.eyeFeaturesClicks.length === 0) {\n        return null;\n    }\n    var acceptTime = performance.now() - this.trailTime;\n    var trailX = [];\n    var trailY = [];\n    var trailFeat = [];\n    for (var i = 0; i < this.trailDataWindow; i++) {\n        if (this.trailTimes.get(i) > acceptTime) {\n            trailX.push(this.screenXTrailArray.get(i));\n            trailY.push(this.screenYTrailArray.get(i));\n            trailFeat.push(this.eyeFeaturesTrail.get(i));\n        }\n    }\n\n    var len = this.eyeFeaturesClicks.data.length;\n    var weightedEyeFeats = Array(len);\n    var weightedXArray = Array(len);\n    var weightedYArray = Array(len);\n    for (var i = 0; i < len; i++) {\n        var weight = Math.sqrt( 1 / (len - i) ); // access from oldest to newest so should start with low weight and increase steadily\n        //abstraction is leaking...\n        var trueIndex = this.eyeFeaturesClicks.getTrueIndex(i);\n        for (var j = 0; j < this.eyeFeaturesClicks.data[trueIndex].length; j++) {\n            var val = this.eyeFeaturesClicks.data[trueIndex][j] * weight;\n            if (weightedEyeFeats[trueIndex] !== undefined){\n                weightedEyeFeats[trueIndex].push(val);\n            } else {\n                weightedEyeFeats[trueIndex] = [val];\n            }\n        }\n        weightedXArray[i] = this.screenXClicksArray.get(i).slice(0, this.screenXClicksArray.get(i).length);\n        weightedYArray[i] = this.screenYClicksArray.get(i).slice(0, this.screenYClicksArray.get(i).length);\n        weightedXArray[i][0] = weightedXArray[i][0] * weight;\n        weightedYArray[i][0] = weightedYArray[i][0] * weight;\n    }\n\n    var screenXArray = weightedXArray.concat(trailX);\n    var screenYArray = weightedYArray.concat(trailY);\n    var eyeFeatures = weightedEyeFeats.concat(trailFeat);\n\n    var coefficientsX = _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ridge(screenXArray, eyeFeatures, this.ridgeParameter);\n    var coefficientsY = _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ridge(screenYArray, eyeFeatures, this.ridgeParameter);\n\n    var eyeFeats = _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getEyeFeats(eyesObj);\n    var predictedX = 0;\n    for(var i=0; i< eyeFeats.length; i++){\n        predictedX += eyeFeats[i] * coefficientsX[i];\n    }\n    var predictedY = 0;\n    for(var i=0; i< eyeFeats.length; i++){\n        predictedY += eyeFeats[i] * coefficientsY[i];\n    }\n\n    predictedX = Math.floor(predictedX);\n    predictedY = Math.floor(predictedY);\n\n    if (_params_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].applyKalmanFilter) {\n        // Update Kalman model, and get prediction\n        var newGaze = [predictedX, predictedY]; // [20200607 xk] Should we use a 1x4 vector?\n        newGaze = this.kalman.update(newGaze);\n\n        return {\n            x: newGaze[0],\n            y: newGaze[1]\n        };\n    } else {\n        return {\n            x: predictedX,\n            y: predictedY\n        };\n    }\n};\n\nreg.RidgeWeightedReg.prototype.setData = _util_regression_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setData;\n\n/**\n * Return the data\n * @returns {Array.<Object>|*}\n */\nreg.RidgeWeightedReg.prototype.getData = function() {\n    return this.dataClicks.data;\n};\n\n/**\n * The RidgeWeightedReg object name\n * @type {string}\n */\nreg.RidgeWeightedReg.prototype.name = 'ridgeWeighted';\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (reg);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViZ2F6ZXIvc3JjL3JpZGdlV2VpZ2h0ZWRSZWcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEI7QUFDc0I7QUFDbEI7O0FBRWxDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyw0REFBZTs7QUFFckQ7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EseUNBQXlDLDREQUFlOztBQUV4RDtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwQkFBMEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0IsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQSx3QkFBd0IsbURBQW1EO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0IsNERBQWU7QUFDdkMsd0JBQXdCLDREQUFlOztBQUV2QyxtQkFBbUIsaURBQUk7QUFDdkI7QUFDQSxpQkFBaUIsb0JBQW9CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixvQkFBb0I7QUFDckM7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFFBQVEsbURBQU07QUFDZDtBQUNBLGdEQUFnRDtBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUNBQXlDLDREQUFlOztBQUV4RDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQSxpRUFBZSxHQUFHLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1lY29tbWVyY2Utd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy93ZWJnYXplci9zcmMvcmlkZ2VXZWlnaHRlZFJlZy5tanM/MGQ2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXRpbCBmcm9tICcuL3V0aWwubWpzJztcbmltcG9ydCB1dGlsX3JlZ3Jlc3Npb24gZnJvbSAnLi91dGlsX3JlZ3Jlc3Npb24ubWpzJztcbmltcG9ydCBwYXJhbXMgZnJvbSAnLi9wYXJhbXMubWpzJztcblxuY29uc3QgcmVnID0ge307XG5cbi8qKlxuICogQ29uc3RydWN0b3Igb2YgUmlkZ2VXZWlnaHRlZFJlZyBvYmplY3RcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5yZWcuUmlkZ2VXZWlnaHRlZFJlZyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5pdCgpO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIG5ldyBhcnJheXMgYW5kIGluaXRpYWxpemUgS2FsbWFuIGZpbHRlci5cbiAqL1xucmVnLlJpZGdlV2VpZ2h0ZWRSZWcucHJvdG90eXBlLmluaXQgPSB1dGlsX3JlZ3Jlc3Npb24uSW5pdFJlZ3Jlc3Npb25cblxuLyoqXG4gKiBBZGQgZ2l2ZW4gZGF0YSBmcm9tIGV5ZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBleWVzIC0gZXllcyB3aGVyZSBleHRyYWN0IGRhdGEgdG8gYWRkXG4gKiBAcGFyYW0ge09iamVjdH0gc2NyZWVuUG9zIC0gVGhlIGN1cnJlbnQgc2NyZWVuIHBvaW50XG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZSAtIFRoZSB0eXBlIG9mIHBlcmZvcm1lZCBhY3Rpb25cbiAqL1xucmVnLlJpZGdlV2VpZ2h0ZWRSZWcucHJvdG90eXBlLmFkZERhdGEgPSB1dGlsX3JlZ3Jlc3Npb24uYWRkRGF0YVxuXG4vKipcbiAqIFRyeSB0byBwcmVkaWN0IGNvb3JkaW5hdGVzIGZyb20gcHVwaWwgZGF0YVxuICogYWZ0ZXIgYXBwbHkgbGluZWFyIHJlZ3Jlc3Npb24gb24gZGF0YSBzZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBleWVzT2JqIC0gVGhlIGN1cnJlbnQgdXNlciBleWVzIG9iamVjdFxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xucmVnLlJpZGdlV2VpZ2h0ZWRSZWcucHJvdG90eXBlLnByZWRpY3QgPSBmdW5jdGlvbihleWVzT2JqKSB7XG4gICAgaWYgKCFleWVzT2JqIHx8IHRoaXMuZXllRmVhdHVyZXNDbGlja3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgYWNjZXB0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gdGhpcy50cmFpbFRpbWU7XG4gICAgdmFyIHRyYWlsWCA9IFtdO1xuICAgIHZhciB0cmFpbFkgPSBbXTtcbiAgICB2YXIgdHJhaWxGZWF0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRyYWlsRGF0YVdpbmRvdzsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYWlsVGltZXMuZ2V0KGkpID4gYWNjZXB0VGltZSkge1xuICAgICAgICAgICAgdHJhaWxYLnB1c2godGhpcy5zY3JlZW5YVHJhaWxBcnJheS5nZXQoaSkpO1xuICAgICAgICAgICAgdHJhaWxZLnB1c2godGhpcy5zY3JlZW5ZVHJhaWxBcnJheS5nZXQoaSkpO1xuICAgICAgICAgICAgdHJhaWxGZWF0LnB1c2godGhpcy5leWVGZWF0dXJlc1RyYWlsLmdldChpKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGVuID0gdGhpcy5leWVGZWF0dXJlc0NsaWNrcy5kYXRhLmxlbmd0aDtcbiAgICB2YXIgd2VpZ2h0ZWRFeWVGZWF0cyA9IEFycmF5KGxlbik7XG4gICAgdmFyIHdlaWdodGVkWEFycmF5ID0gQXJyYXkobGVuKTtcbiAgICB2YXIgd2VpZ2h0ZWRZQXJyYXkgPSBBcnJheShsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIHdlaWdodCA9IE1hdGguc3FydCggMSAvIChsZW4gLSBpKSApOyAvLyBhY2Nlc3MgZnJvbSBvbGRlc3QgdG8gbmV3ZXN0IHNvIHNob3VsZCBzdGFydCB3aXRoIGxvdyB3ZWlnaHQgYW5kIGluY3JlYXNlIHN0ZWFkaWx5XG4gICAgICAgIC8vYWJzdHJhY3Rpb24gaXMgbGVha2luZy4uLlxuICAgICAgICB2YXIgdHJ1ZUluZGV4ID0gdGhpcy5leWVGZWF0dXJlc0NsaWNrcy5nZXRUcnVlSW5kZXgoaSk7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5leWVGZWF0dXJlc0NsaWNrcy5kYXRhW3RydWVJbmRleF0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSB0aGlzLmV5ZUZlYXR1cmVzQ2xpY2tzLmRhdGFbdHJ1ZUluZGV4XVtqXSAqIHdlaWdodDtcbiAgICAgICAgICAgIGlmICh3ZWlnaHRlZEV5ZUZlYXRzW3RydWVJbmRleF0gIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgd2VpZ2h0ZWRFeWVGZWF0c1t0cnVlSW5kZXhdLnB1c2godmFsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2VpZ2h0ZWRFeWVGZWF0c1t0cnVlSW5kZXhdID0gW3ZhbF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2VpZ2h0ZWRYQXJyYXlbaV0gPSB0aGlzLnNjcmVlblhDbGlja3NBcnJheS5nZXQoaSkuc2xpY2UoMCwgdGhpcy5zY3JlZW5YQ2xpY2tzQXJyYXkuZ2V0KGkpLmxlbmd0aCk7XG4gICAgICAgIHdlaWdodGVkWUFycmF5W2ldID0gdGhpcy5zY3JlZW5ZQ2xpY2tzQXJyYXkuZ2V0KGkpLnNsaWNlKDAsIHRoaXMuc2NyZWVuWUNsaWNrc0FycmF5LmdldChpKS5sZW5ndGgpO1xuICAgICAgICB3ZWlnaHRlZFhBcnJheVtpXVswXSA9IHdlaWdodGVkWEFycmF5W2ldWzBdICogd2VpZ2h0O1xuICAgICAgICB3ZWlnaHRlZFlBcnJheVtpXVswXSA9IHdlaWdodGVkWUFycmF5W2ldWzBdICogd2VpZ2h0O1xuICAgIH1cblxuICAgIHZhciBzY3JlZW5YQXJyYXkgPSB3ZWlnaHRlZFhBcnJheS5jb25jYXQodHJhaWxYKTtcbiAgICB2YXIgc2NyZWVuWUFycmF5ID0gd2VpZ2h0ZWRZQXJyYXkuY29uY2F0KHRyYWlsWSk7XG4gICAgdmFyIGV5ZUZlYXR1cmVzID0gd2VpZ2h0ZWRFeWVGZWF0cy5jb25jYXQodHJhaWxGZWF0KTtcblxuICAgIHZhciBjb2VmZmljaWVudHNYID0gdXRpbF9yZWdyZXNzaW9uLnJpZGdlKHNjcmVlblhBcnJheSwgZXllRmVhdHVyZXMsIHRoaXMucmlkZ2VQYXJhbWV0ZXIpO1xuICAgIHZhciBjb2VmZmljaWVudHNZID0gdXRpbF9yZWdyZXNzaW9uLnJpZGdlKHNjcmVlbllBcnJheSwgZXllRmVhdHVyZXMsIHRoaXMucmlkZ2VQYXJhbWV0ZXIpO1xuXG4gICAgdmFyIGV5ZUZlYXRzID0gdXRpbC5nZXRFeWVGZWF0cyhleWVzT2JqKTtcbiAgICB2YXIgcHJlZGljdGVkWCA9IDA7XG4gICAgZm9yKHZhciBpPTA7IGk8IGV5ZUZlYXRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgcHJlZGljdGVkWCArPSBleWVGZWF0c1tpXSAqIGNvZWZmaWNpZW50c1hbaV07XG4gICAgfVxuICAgIHZhciBwcmVkaWN0ZWRZID0gMDtcbiAgICBmb3IodmFyIGk9MDsgaTwgZXllRmVhdHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBwcmVkaWN0ZWRZICs9IGV5ZUZlYXRzW2ldICogY29lZmZpY2llbnRzWVtpXTtcbiAgICB9XG5cbiAgICBwcmVkaWN0ZWRYID0gTWF0aC5mbG9vcihwcmVkaWN0ZWRYKTtcbiAgICBwcmVkaWN0ZWRZID0gTWF0aC5mbG9vcihwcmVkaWN0ZWRZKTtcblxuICAgIGlmIChwYXJhbXMuYXBwbHlLYWxtYW5GaWx0ZXIpIHtcbiAgICAgICAgLy8gVXBkYXRlIEthbG1hbiBtb2RlbCwgYW5kIGdldCBwcmVkaWN0aW9uXG4gICAgICAgIHZhciBuZXdHYXplID0gW3ByZWRpY3RlZFgsIHByZWRpY3RlZFldOyAvLyBbMjAyMDA2MDcgeGtdIFNob3VsZCB3ZSB1c2UgYSAxeDQgdmVjdG9yP1xuICAgICAgICBuZXdHYXplID0gdGhpcy5rYWxtYW4udXBkYXRlKG5ld0dhemUpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBuZXdHYXplWzBdLFxuICAgICAgICAgICAgeTogbmV3R2F6ZVsxXVxuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBwcmVkaWN0ZWRYLFxuICAgICAgICAgICAgeTogcHJlZGljdGVkWVxuICAgICAgICB9O1xuICAgIH1cbn07XG5cbnJlZy5SaWRnZVdlaWdodGVkUmVnLnByb3RvdHlwZS5zZXREYXRhID0gdXRpbF9yZWdyZXNzaW9uLnNldERhdGE7XG5cbi8qKlxuICogUmV0dXJuIHRoZSBkYXRhXG4gKiBAcmV0dXJucyB7QXJyYXkuPE9iamVjdD58Kn1cbiAqL1xucmVnLlJpZGdlV2VpZ2h0ZWRSZWcucHJvdG90eXBlLmdldERhdGEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhQ2xpY2tzLmRhdGE7XG59O1xuXG4vKipcbiAqIFRoZSBSaWRnZVdlaWdodGVkUmVnIG9iamVjdCBuYW1lXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5yZWcuUmlkZ2VXZWlnaHRlZFJlZy5wcm90b3R5cGUubmFtZSA9ICdyaWRnZVdlaWdodGVkJztcblxuZXhwb3J0IGRlZmF1bHQgcmVnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/webgazer/src/ridgeWeightedReg.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/webgazer/src/util.mjs":
/*!********************************************!*\
  !*** ./node_modules/webgazer/src/util.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _mat_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mat.mjs */ \"(ssr)/./node_modules/webgazer/src/mat.mjs\");\n/* harmony import */ var _params_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./params.mjs */ \"(ssr)/./node_modules/webgazer/src/params.mjs\");\n\n\n\nconst util = {};\n\n\nvar resizeWidth = 10;\nvar resizeHeight = 6;\n\n//not used !?\n/**\n * Eye class, represents an eye patch detected in the video stream\n * @param {ImageData} patch - the image data corresponding to an eye\n * @param {Number} imagex - x-axis offset from the top-left corner of the video canvas\n * @param {Number} imagey - y-axis offset from the top-left corner of the video canvas\n * @param {Number} width  - width of the eye patch\n * @param {Number} height - height of the eye patch\n */\nutil.Eye = function(patch, imagex, imagey, width, height) {\n    this.patch = patch;\n    this.imagex = imagex;\n    this.imagey = imagey;\n    this.width = width;\n    this.height = height;\n};\n\n/**\n * Compute eyes size as gray histogram\n * @param {Object} eyes - The eyes where looking for gray histogram\n * @returns {Array.<T>} The eyes gray level histogram\n */\nutil.getEyeFeats = function(eyes) {\n    let process = (eye) => {\n        let resized = this.resizeEye(eye, resizeWidth, resizeHeight);\n        let gray = this.grayscale(resized.data, resized.width, resized.height);\n        let hist = [];\n        this.equalizeHistogram(gray, 5, hist);\n        return hist;\n    };\n\n    if (webgazer.params.trackEye == 'left') {\n        return process(eyes.left);\n    }\n    else if (webgazer.params.trackEye == 'right') {\n        return process(eyes.right);\n    }\n    else {\n        return [].concat(process(eyes.left), process(eyes.right));\n    }\n}\n\n//Data Window class\n//operates like an array but 'wraps' data around to keep the array at a fixed windowSize\n/**\n * DataWindow class - Operates like an array, but 'wraps' data around to keep the array at a fixed windowSize\n * @param {Number} windowSize - defines the maximum size of the window\n * @param {Array} data - optional data to seed the DataWindow with\n **/\nutil.DataWindow = function(windowSize, data) {\n    this.data = [];\n    this.windowSize = windowSize;\n    this.index = 0;\n    this.length = 0;\n    if(data){\n        this.data = data.slice(data.length-windowSize,data.length);\n        this.length = this.data.length;\n    }\n};\n\n/**\n * [push description]\n * @param  {*} entry - item to be inserted. It either grows the DataWindow or replaces the oldest item\n * @return {DataWindow} this\n */\nutil.DataWindow.prototype.push = function(entry) {\n    if (this.data.length < this.windowSize) {\n        this.data.push(entry);\n        this.length = this.data.length;\n        return this;\n    }\n\n    //replace oldest entry by wrapping around the DataWindow\n    this.data[this.index] = entry;\n    this.index = (this.index + 1) % this.windowSize;\n    return this;\n};\n\n/**\n * Get the element at the ind position by wrapping around the DataWindow\n * @param  {Number} ind index of desired entry\n * @return {*}\n */\nutil.DataWindow.prototype.get = function(ind) {\n    return this.data[this.getTrueIndex(ind)];\n};\n\n/**\n * Gets the true this.data array index given an index for a desired element\n * @param {Number} ind - index of desired entry\n * @return {Number} index of desired entry in this.data\n */\nutil.DataWindow.prototype.getTrueIndex = function(ind) {\n    if (this.data.length < this.windowSize) {\n        return ind;\n    } else {\n        //wrap around ind so that we can traverse from oldest to newest\n        return (ind + this.index) % this.windowSize;\n    }\n};\n\n/**\n * Append all the contents of data\n * @param {Array} data - to be inserted\n */\nutil.DataWindow.prototype.addAll = function(data) {\n    for (var i = 0; i < data.length; i++) {\n        this.push(data[i]);\n    }\n};\n\n\n//Helper functions\n/**\n * Grayscales an image patch. Can be used for the whole canvas, detected face, detected eye, etc.\n *\n * Code from tracking.js by Eduardo Lundgren, et al.\n * https://github.com/eduardolundgren/tracking.js/blob/master/src/tracking.js\n *\n * Software License Agreement (BSD License) Copyright (c) 2014, Eduardo A. Lundgren Melo. All rights reserved.\n * Redistribution and use of this software in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n * The name of Eduardo A. Lundgren Melo may not be used to endorse or promote products derived from this software without specific prior written permission of Eduardo A. Lundgren Melo.\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * @param  {Array} pixels - image data to be grayscaled\n * @param  {Number} width  - width of image data to be grayscaled\n * @param  {Number} height - height of image data to be grayscaled\n * @return {Array} grayscaledImage\n */\nutil.grayscale = function(pixels, width, height){\n    var gray = new Uint8ClampedArray(pixels.length >> 2);\n    var p = 0;\n    var w = 0;\n    for (var i = 0; i < height; i++) {\n        for (var j = 0; j < width; j++) {\n            var value = pixels[w] * 0.299 + pixels[w + 1] * 0.587 + pixels[w + 2] * 0.114;\n            gray[p++] = value;\n\n            w += 4;\n        }\n    }\n    return gray;\n};\n\n/**\n * Increase contrast of an image.\n *\n * Code from Martin Tschirsich, Copyright (c) 2012.\n * https://github.com/mtschirs/js-objectdetect/blob/gh-pages/js/objectdetect.js\n *\n * @param {Array} src - grayscale integer array\n * @param {Number} step - sampling rate, control performance\n * @param {Array} dst - array to hold the resulting image\n */\nutil.equalizeHistogram = function(src, step, dst) {\n    var srcLength = src.length;\n    if (!dst) dst = src;\n    if (!step) step = 5;\n\n    // Compute histogram and histogram sum:\n    var hist = Array(256).fill(0);\n\n    for (var i = 0; i < srcLength; i += step) {\n        ++hist[src[i]];\n    }\n\n    // Compute integral histogram:\n    var norm = 255 * step / srcLength,\n        prev = 0;\n    for (var i = 0; i < 256; ++i) {\n        var h = hist[i];\n        prev = h += prev;\n        hist[i] = h * norm; // For non-integer src: ~~(h * norm + 0.5);\n    }\n\n    // Equalize image:\n    for (var i = 0; i < srcLength; ++i) {\n        dst[i] = hist[src[i]];\n    }\n    return dst;\n};\n\n//not used !?\nutil.threshold = function(data, threshold) {\n    for (let i = 0; i < data.length; i++) {\n        data[i] = (data[i] > threshold) ? 255 : 0;\n    }\n    return data;\n};\n\n//not used !?\nutil.correlation = function(data1, data2) {\n    const length = Math.min(data1.length, data2.length);\n    let count = 0;\n    for (let i = 0; i < length; i++) {\n        if (data1[i] === data2[i]) {\n            count++;\n        }\n    }\n    return count / Math.max(data1.length, data2.length);\n};\n\n/**\n * Gets an Eye object and resizes it to the desired resolution\n * @param  {webgazer.util.Eye} eye - patch to be resized\n * @param  {Number} resizeWidth - desired width\n * @param  {Number} resizeHeight - desired height\n * @return {webgazer.util.Eye} resized eye patch\n */\nutil.resizeEye = function(eye, resizeWidth, resizeHeight) {\n\n    var canvas = document.createElement('canvas');\n    canvas.width = eye.width;\n    canvas.height = eye.height;\n\n    canvas.getContext('2d').putImageData(eye.patch,0,0);\n\n    var tempCanvas = document.createElement('canvas');\n\n    tempCanvas.width = resizeWidth;\n    tempCanvas.height = resizeHeight;\n\n    // save the canvas into temp canvas\n    tempCanvas.getContext('2d').drawImage(canvas, 0, 0, canvas.width, canvas.height, 0, 0, resizeWidth, resizeHeight);\n\n    return tempCanvas.getContext('2d').getImageData(0, 0, resizeWidth, resizeHeight);\n};\n\n/**\n * Checks if the prediction is within the boundaries of the viewport and constrains it\n * @param  {Array} prediction [x,y] - predicted gaze coordinates\n * @return {Array} constrained coordinates\n */\nutil.bound = function(prediction){\n    if(prediction.x < 0)\n        prediction.x = 0;\n    if(prediction.y < 0)\n        prediction.y = 0;\n    var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    if(prediction.x > w){\n        prediction.x = w;\n    }\n\n    if(prediction.y > h)\n    {\n        prediction.y = h;\n    }\n    return prediction;\n};\n\n//not used !?\n/**\n * Write statistics in debug paragraph panel\n * @param {HTMLElement} para - The <p> tag where write data\n * @param {Object} stats - The stats data to output\n */\nfunction debugBoxWrite(para, stats) {\n    var str = '';\n    for (var key in stats) {\n        str += key + ': ' + stats[key] + '\\n';\n    }\n    para.innerText = str;\n}\n\n//not used !?\n/**\n * Constructor of DebugBox object,\n * it insert an paragraph inside a div to the body, in view to display debug data\n * @param {Number} interval - The log interval\n * @constructor\n */\nutil.DebugBox = function(interval) {\n    this.para = document.createElement('p');\n    this.div = document.createElement('div');\n    this.div.appendChild(this.para);\n    document.body.appendChild(this.div);\n\n    this.buttons = {};\n    this.canvas = {};\n    this.stats = {};\n    var updateInterval = interval || 300;\n    (function(localThis) {\n        setInterval(function() {\n            debugBoxWrite(localThis.para, localThis.stats);\n        }, updateInterval);\n    }(this));\n};\n\n//not used !?\n/**\n * Add stat data for log\n * @param {String} key - The data key\n * @param {*} value - The value\n */\nutil.DebugBox.prototype.set = function(key, value) {\n    this.stats[key] = value;\n};\n\n//not used !?\n/**\n * Initialize stats in case where key does not exist, else\n * increment value for key\n * @param {String} key - The key to process\n * @param {Number} incBy - Value to increment for given key (default: 1)\n * @param {Number} init - Initial value in case where key does not exist (default: 0)\n */\nutil.DebugBox.prototype.inc = function(key, incBy, init) {\n    if (!this.stats[key]) {\n        this.stats[key] = init || 0;\n    }\n    this.stats[key] += incBy || 1;\n};\n\n//not used !?\n/**\n * Create a button and register the given function to the button click event\n * @param {String} name - The button name to link\n * @param {Function} func - The onClick callback\n */\nutil.DebugBox.prototype.addButton = function(name, func) {\n    if (!this.buttons[name]) {\n        this.buttons[name] = document.createElement('button');\n        this.div.appendChild(this.buttons[name]);\n    }\n    var button = this.buttons[name];\n    this.buttons[name] = button;\n    button.addEventListener('click', func);\n    button.innerText = name;\n};\n\n//not used !?\n/**\n * Search for a canvas elemenet with name, or create on if not exist.\n * Then send the canvas element as callback parameter.\n * @param {String} name - The canvas name to send/create\n * @param {Function} func - The callback function where send canvas\n */\nutil.DebugBox.prototype.show = function(name, func) {\n    if (!this.canvas[name]) {\n        this.canvas[name] = document.createElement('canvas');\n        this.div.appendChild(this.canvas[name]);\n    }\n    var canvas = this.canvas[name];\n    canvas.getContext('2d').clearRect(0,0, canvas.width, canvas.height);\n    func(canvas);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (util);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/webgazer/src/util.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/webgazer/src/util_regression.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/webgazer/src/util_regression.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _util_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.mjs */ \"(ssr)/./node_modules/webgazer/src/util.mjs\");\n/* harmony import */ var _mat_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat.mjs */ \"(ssr)/./node_modules/webgazer/src/mat.mjs\");\n/* harmony import */ var _params_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./params.mjs */ \"(ssr)/./node_modules/webgazer/src/params.mjs\");\n\n\n\n\nconst util_regression = {};\n\n\n/**\n * Initialize new arrays and initialize Kalman filter for regressions.\n */\nutil_regression.InitRegression = function() {\n  var dataWindow = 700;\n  var trailDataWindow = 10;\n  this.ridgeParameter = Math.pow(10,-5);\n  this.errorXArray = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(dataWindow);\n  this.errorYArray = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(dataWindow);\n\n\n  this.screenXClicksArray = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(dataWindow);\n  this.screenYClicksArray = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(dataWindow);\n  this.eyeFeaturesClicks = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(dataWindow);\n\n  //sets to one second worth of cursor trail\n  this.trailTime = 1000;\n  this.trailDataWindow = this.trailTime / _params_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].moveTickSize;\n  this.screenXTrailArray = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(trailDataWindow);\n  this.screenYTrailArray = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(trailDataWindow);\n  this.eyeFeaturesTrail = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(trailDataWindow);\n  this.trailTimes = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(trailDataWindow);\n\n  this.dataClicks = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(dataWindow);\n  this.dataTrail = new _util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DataWindow(trailDataWindow);\n\n  // Initialize Kalman filter [20200608 xk] what do we do about parameters?\n  // [20200611 xk] unsure what to do w.r.t. dimensionality of these matrices. So far at least\n  //               by my own anecdotal observation a 4x1 x vector seems to work alright\n  var F = [ [1, 0, 1, 0],\n    [0, 1, 0, 1],\n    [0, 0, 1, 0],\n    [0, 0, 0, 1]];\n\n  //Parameters Q and R may require some fine tuning\n  var Q = [ [1/4, 0,    1/2, 0],\n    [0,   1/4,  0,   1/2],\n    [1/2, 0,    1,   0],\n    [0,  1/2,  0,   1]];// * delta_t\n  var delta_t = 1/10; // The amount of time between frames\n  Q = _mat_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multScalar(Q, delta_t);\n\n  var H = [ [1, 0, 0, 0, 0, 0],\n    [0, 1, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0, 0],\n    [0, 0, 0, 1, 0, 0]];\n  var H = [ [1, 0, 0, 0],\n    [0, 1, 0, 0]];\n  var pixel_error = 47; //We will need to fine tune this value [20200611 xk] I just put a random value here\n\n  //This matrix represents the expected measurement error\n  var R = _mat_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multScalar(_mat_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].identity(2), pixel_error);\n\n  var P_initial = _mat_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multScalar(_mat_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].identity(4), 0.0001); //Initial covariance matrix\n  var x_initial = [[500], [500], [0], [0]]; // Initial measurement matrix\n\n  this.kalman = new util_regression.KalmanFilter(F, H, Q, R, P_initial, x_initial);\n}\n\n/**\n * Kalman Filter constructor\n * Kalman filters work by reducing the amount of noise in a models.\n * https://blog.cordiner.net/2011/05/03/object-tracking-using-a-kalman-filter-matlab/\n *\n * @param {Array.<Array.<Number>>} F - transition matrix\n * @param {Array.<Array.<Number>>} Q - process noise matrix\n * @param {Array.<Array.<Number>>} H - maps between measurement vector and noise matrix\n * @param {Array.<Array.<Number>>} R - defines measurement error of the device\n * @param {Array} P_initial - the initial state\n * @param {Array} X_initial - the initial state of the device\n */\nutil_regression.KalmanFilter = function(F, H, Q, R, P_initial, X_initial) {\n    this.F = F; // State transition matrix\n    this.Q = Q; // Process noise matrix\n    this.H = H; // Transformation matrix\n    this.R = R; // Measurement Noise\n    this.P = P_initial; //Initial covariance matrix\n    this.X = X_initial; //Initial guess of measurement\n};\n\n/**\n * Get Kalman next filtered value and update the internal state\n * @param {Array} z - the new measurement\n * @return {Array}\n */\nutil_regression.KalmanFilter.prototype.update = function(z) {\n    // Here, we define all the different matrix operations we will need\n    var {\n        add, sub, mult, inv, identity, transpose,\n    } = _mat_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n    //TODO cache variables like the transpose of H\n\n    // prediction: X = F * X  |  P = F * P * F' + Q\n    var X_p = mult(this.F, this.X); //Update state vector\n    var P_p = add(mult(mult(this.F,this.P), transpose(this.F)), this.Q); //Predicted covaraince\n\n    //Calculate the update values\n    z = transpose([z])\n    var y = sub(z, mult(this.H, X_p)); // This is the measurement error (between what we expect and the actual value)\n    var S = add(mult(mult(this.H, P_p), transpose(this.H)), this.R); //This is the residual covariance (the error in the covariance)\n\n    // kalman multiplier: K = P * H' * (H * P * H' + R)^-1\n    var K = mult(P_p, mult(transpose(this.H), inv(S))); //This is the Optimal Kalman Gain\n\n    //We need to change Y into it's column vector form\n    for(var i = 0; i < y.length; i++){\n        y[i] = [y[i]];\n    }\n\n    //Now we correct the internal values of the model\n    // correction: X = X + K * (m - H * X)  |  P = (I - K * H) * P\n    this.X = add(X_p, mult(K, y));\n    this.P = mult(sub(identity(K.length), mult(K,this.H)), P_p);\n    return transpose(mult(this.H, this.X))[0]; //Transforms the predicted state back into it's measurement form\n};\n\n/**\n * Performs ridge regression, according to the Weka code.\n * @param {Array} y - corresponds to screen coordinates (either x or y) for each of n click events\n * @param {Array.<Array.<Number>>} X - corresponds to gray pixel features (120 pixels for both eyes) for each of n clicks\n * @param {Array} k - ridge parameter\n * @return{Array} regression coefficients\n */\nutil_regression.ridge = function(y, X, k){\n    var nc = X[0].length;\n    var m_Coefficients = new Array(nc);\n    var xt = _mat_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].transpose(X);\n    var solution = new Array();\n    var success = true;\n    do{\n        var ss = _mat_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].mult(xt,X);\n        // Set ridge regression adjustment\n        for (var i = 0; i < nc; i++) {\n            ss[i][i] = ss[i][i] + k;\n        }\n\n        // Carry out the regression\n        var bb = _mat_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].mult(xt,y);\n        for(var i = 0; i < nc; i++) {\n            m_Coefficients[i] = bb[i][0];\n        }\n        try{\n            var n = (m_Coefficients.length !== 0 ? m_Coefficients.length/m_Coefficients.length: 0);\n            if (m_Coefficients.length*n !== m_Coefficients.length){\n                console.log('Array length must be a multiple of m')\n            }\n            solution = _mat_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].solve(ss, bb);\n\n            for (var i = 0; i < nc; i++){\n                m_Coefficients[i] = solution[i];\n            }\n            success = true;\n        }\n        catch (ex){\n            k *= 10;\n            console.log(ex);\n            success = false;\n        }\n    } while (!success);\n    return m_Coefficients;\n}\n\n/**\n * Add given data to current data set then,\n * replace current data member with given data\n * @param {Array.<Object>} data - The data to set\n */\nutil_regression.setData = function(data) {\n  for (var i = 0; i < data.length; i++) {\n    // Clone data array\n    var leftData = new Uint8ClampedArray(data[i].eyes.left.patch.data);\n    var rightData = new Uint8ClampedArray(data[i].eyes.right.patch.data);\n    // Duplicate ImageData object\n    data[i].eyes.left.patch = new ImageData(leftData, data[i].eyes.left.width, data[i].eyes.left.height);\n    data[i].eyes.right.patch = new ImageData(rightData, data[i].eyes.right.width, data[i].eyes.right.height);\n\n    // Add those data objects to model\n    this.addData(data[i].eyes, data[i].screenPos, data[i].type);\n  }\n};\n\n\n//not used ?!\n//TODO: still usefull ???\n/**\n *\n * @returns {Number}\n */\nutil_regression.getCurrentFixationIndex = function() {\n  var index = 0;\n  var recentX = this.screenXTrailArray.get(0);\n  var recentY = this.screenYTrailArray.get(0);\n  for (var i = this.screenXTrailArray.length - 1; i >= 0; i--) {\n    var currX = this.screenXTrailArray.get(i);\n    var currY = this.screenYTrailArray.get(i);\n    var euclideanDistance = Math.sqrt(Math.pow((currX-recentX),2)+Math.pow((currY-recentY),2));\n    if (euclideanDistance > 72){\n      return i+1;\n    }\n  }\n  return i;\n}\n\nutil_regression.addData = function(eyes, screenPos, type) {\n    if (!eyes) {\n        return;\n    }\n    //not doing anything with blink at present\n    // if (eyes.left.blink || eyes.right.blink) {\n    //     return;\n    // }\n    if (type === 'click') {\n        this.screenXClicksArray.push([screenPos[0]]);\n        this.screenYClicksArray.push([screenPos[1]]);\n        this.eyeFeaturesClicks.push(_util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getEyeFeats(eyes));\n        this.dataClicks.push({'eyes':eyes, 'screenPos':screenPos, 'type':type});\n    } else if (type === 'move') {\n        this.screenXTrailArray.push([screenPos[0]]);\n        this.screenYTrailArray.push([screenPos[1]]);\n\n        this.eyeFeaturesTrail.push(_util_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getEyeFeats(eyes));\n        this.trailTimes.push(performance.now());\n        this.dataTrail.push({'eyes':eyes, 'screenPos':screenPos, 'type':type});\n    }\n\n    // [20180730 JT] Why do we do this? It doesn't return anything...\n    // But as JS is pass by reference, it still affects it.\n    //\n    // Causes problems for when we want to call 'addData' twice in a row on the same object, but perhaps with different screenPos or types (think multiple interactions within one video frame)\n    //eyes.left.patch = Array.from(eyes.left.patch.data);\n    //eyes.right.patch = Array.from(eyes.right.patch.data);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (util_regression);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/webgazer/src/util_regression.mjs\n");

/***/ })

};
;